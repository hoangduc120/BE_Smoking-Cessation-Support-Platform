openapi: 3.0.0
servers:
  - description: QuitSmoke API - Production
    url: https://be-smoking-cessation-support-platform-w1tg.onrender.com
  - description: QuitSmoke API - Development
    url: http://localhost:5000
info:
  version: "1.0.0"
  title: QuitSmoke API by Hoàng Đức
  description: API for managing user authentication, blogs, profiles, surveys, memberships, payments, chat, and quit plans, developed by Hoàng Đức.
  contact:
    name: Hoàng Đức
    email: hoangduc@example.com
security:
  - BearerAuth: []
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Authenticates a user and returns access and refresh tokens.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/register:
    post:
      tags:
        - Auth
      summary: User registration
      description: Registers a new user in the system.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '200':
          description: Successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      tags:
        - Auth
      summary: User logout
      description: Logs out the user by invalidating the refresh token.
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description: Generates a new access token using a valid refresh token.
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      responses:
        '200':
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/google:
    get:
      tags:
        - Auth
      summary: Initiate Google OAuth login
      description: Redirects to Google OAuth for authentication.
      operationId: googleAuth
      responses:
        '302':
          description: Redirect to Google OAuth
  /auth/google/callback:
    get:
      tags:
        - Auth
      summary: Google OAuth callback
      description: Handles Google OAuth callback and returns tokens.
      operationId: googleCallback
      responses:
        '302':
          description: Redirect with access token
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Initiates the password reset process by sending a reset link.
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
        required: true
      responses:
        '200':
          description: Password reset link sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/reset-password:
    put:
      tags:
        - Auth
      summary: Reset user password
      description: Resets the user password using a valid reset token.
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid reset token or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs:
    get:
      tags:
        - Blog
      summary: Get all blogs
      description: Retrieves a list of all blogs with optional pagination.
      operationId: getAllBlogs
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of blogs per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Blog
      summary: Create a new blog
      description: Creates a new blog post (requires user, coach, or admin role).
      operationId: createBlog
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCreateRequest'
        required: true
      responses:
        '200':
          description: Blog created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/tags:
    get:
      tags:
        - Blog
      summary: Get all tags
      description: Retrieves a list of all tags used in blogs.
      operationId: getAllTags
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 'motivation'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/tag/{tagId}:
    get:
      tags:
        - Blog
      summary: Get blogs by tag
      description: Retrieves all blogs associated with a specific tag.
      operationId: getBlogsByTag
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
            example: 'motivation'
      responses:
        '200':
          description: List of blogs for the tag
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/user/{userId}:
    get:
      tags:
        - Blog
      summary: Get blogs by user ID
      description: Retrieves all blogs created by a specific user.
      operationId: getBlogsByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of blogs per page
          schema:
            type: integer
            example: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            example: 'createdAt'
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          schema:
            type: string
            enum: ['asc', 'desc']
            example: 'desc'
      responses:
        '200':
          description: List of blogs by user
          content:
            application/json:
              schema:
                type: object
                properties:
                  blogs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Blog"
                  total:
                    type: integer
                    example: 20
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 2
        '404':
          description: User not found or invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/{slug}:
    get:
      tags:
        - Blog
      summary: Get blog by slug
      description: Retrieves a blog post by its slug.
      operationId: getBlogBySlug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
            example: 'how-to-quit-smoking'
      responses:
        '200':
          description: Blog details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/{id}:
    put:
      tags:
        - Blog
      summary: Update a blog
      description: Updates an existing blog post (requires user, coach, or admin role).
      operationId: updateBlog
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogUpdateRequest'
        required: true
      responses:
        '200':
          description: Blog updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Blog
      summary: Delete a blog
      description: Deletes a blog post (requires user, coach, or admin role).
      operationId: deleteBlog
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Blog deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/{bid}/like:
    post:
      tags:
        - Blog
      summary: Like a blog
      description: Likes a blog post (requires user, coach, or admin role).
      operationId: likeBlog
      security:
        - BearerAuth: []
      parameters:
        - name: bid
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Blog liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/{id}/comment:
    post:
      tags:
        - Blog
      summary: Add a comment to a blog
      description: Adds a comment to a blog post (requires user, coach, or admin role).
      operationId: addComment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        required: true
      responses:
        '200':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/all:
    get:
      tags:
        - User
      summary: Get all users
      description: Retrieves a list of all users (requires admin role).
      operationId: getAllUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/search:
    get:
      tags:
        - User
      summary: Search users
      description: Searches for users based on query parameters.
      operationId: searchUsers
      parameters:
        - name: query
          in: query
          description: Search query (e.g., username or email)
          schema:
            type: string
            example: 'john'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of matching users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/profile/me:
    get:
      tags:
        - User
      summary: Get current user profile
      description: Retrieves the profile of the authenticated user.
      operationId: getProfileMe
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/profile:
    get:
      tags:
        - User
      summary: Get user profile
      description: Retrieves the profile of a specific user by query parameter.
      operationId: getProfile
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          description: ID of the user to retrieve
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - User
      summary: Update user profile
      description: Updates the profile of the authenticated user.
      operationId: updateProfile
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
        required: true
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}:
    get:
      tags:
        - User
      summary: Get user by ID
      description: Retrieves a user by their ID.
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}/stats:
    get:
      tags:
        - User
      summary: Get user statistics
      description: Retrieves statistics for a specific user.
      operationId: getUserStats
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/change-password:
    put:
      tags:
        - User
      summary: Change user password
      description: Changes the password of the authenticated user.
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/update-avatar:
    put:
      tags:
        - User
      summary: Update user avatar
      description: Updates the avatar of the authenticated user using Cloudinary.
      operationId: updateAvatar
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AvatarUploadRequest'
        required: true
      responses:
        '200':
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/follow/{id}:
    put:
      tags:
        - User
      summary: Follow a user
      description: Follows a user by their ID.
      operationId: followUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User followed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/unfollow/{id}:
    put:
      tags:
        - User
      summary: Unfollow a user
      description: Unfollows a user by their ID.
      operationId: unfollowUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User unfollowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/followers/{id}:
    get:
      tags:
        - User
      summary: Get followers of a user
      description: Retrieves the list of followers for a specific user.
      operationId: getFollowers
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of followers per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of followers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/following/{id}:
    get:
      tags:
        - User
      summary: Get users followed by a user
      description: Retrieves the list of users followed by a specific user.
      operationId: getFollowing
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of followed users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of followed users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys:
    get:
      tags:
        - Survey
      summary: Get all surveys
      description: Retrieves a list of all surveys (requires admin role).
      operationId: getAllSurveys
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of surveys per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of surveys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Survey
      summary: Create a new survey
      description: Creates a new survey (requires user role).
      operationId: createSurvey
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyCreateRequest'
        required: true
      responses:
        '200':
          description: Survey created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys/me/surveys:
    get:
      tags:
        - Survey
      summary: Get surveys by authenticated user
      description: Retrieves all surveys created by the authenticated user (requires user role).
      operationId: getSurveysByUserIdMe
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of surveys per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of surveys by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys/user/{userId}:
    get:
      tags:
        - Survey
      summary: Get surveys by user ID
      description: Retrieves all surveys created by a specific user (requires authentication).
      operationId: getSurveysByUserId
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of surveys per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of surveys by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys/{surveyId}:
    get:
      tags:
        - Survey
      summary: Get survey by ID
      description: Retrieves a survey by its ID (requires user role).
      operationId: getSurveyById
      security:
        - BearerAuth: []
      parameters:
        - name: surveyId
          in: path
          required: true
          schema:
            type: string
            example: '67890'
      responses:
        '200':
          description: Survey details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Survey
      summary: Update a survey
      description: Updates an existing survey (requires user role).
      operationId: updateSurvey
      security:
        - BearerAuth: []
      parameters:
        - name: surveyId
          in: path
          required: true
          schema:
            type: string
            example: '67890'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyUpdateRequest'
        required: true
      responses:
        '200':
          description: Survey updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Survey
      summary: Delete a survey
      description: Deletes a survey (requires user or admin role).
      operationId: deleteSurvey
      security:
        - BearerAuth: []
      parameters:
        - name: surveyId
          in: path
          required: true
          schema:
            type: string
            example: '67890'
      responses:
        '200':
          description: Survey deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /packages:
    get:
      tags:
        - MembershipPlan
      summary: Get all membership plans
      description: Retrieves a list of all membership plans.
      operationId: getAllPackages
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of plans per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of membership plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MembershipPlan'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - MembershipPlan
      summary: Create a new membership plan
      description: Creates a new membership plan (requires admin role).
      operationId: createPackage
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPlanCreateRequest'
        required: true
      responses:
        '200':
          description: Membership plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipPlan'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /packages/{id}:
    get:
      tags:
        - MembershipPlan
      summary: Get membership plan by ID
      description: Retrieves a membership plan by its ID.
      operationId: getPackageById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'plan-001'
      responses:
        '200':
          description: Membership plan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipPlan'
        '404':
          description: Membership plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - MembershipPlan
      summary: Update a membership plan
      description: Updates an existing membership plan (requires admin role).
      operationId: updatePackage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'plan-001'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPlanUpdateRequest'
        required: true
      responses:
        '200':
          description: Membership plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipPlan'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - MembershipPlan
      summary: Delete a membership plan
      description: Deletes a membership plan (requires admin role).
      operationId: deletePackage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'plan-001'
      responses:
        '200':
          description: Membership plan deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /memberships/register:
    post:
      tags:
        - UserMembership
      summary: Register for a membership plan
      description: Registers the authenticated user for a membership plan (requires user role).
      operationId: registerPackage
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMembershipRegisterRequest'
        required: true
      responses:
        '201':
          description: Successfully registered for membership plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMembership'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data (e.g., invalid packageId or userId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /memberships/active/{userId}:
    get:
      tags:
        - UserMembership
      summary: Get active membership
      description: Retrieves the active membership for a specific user (requires authentication).
      operationId: getActiveMembership
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Active membership details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMembership'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No active membership found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /memberships/access/{userId}/{feature}:
    get:
      tags:
        - UserMembership
      summary: Check feature access
      description: Checks if a user has access to a specific feature based on their membership (requires authentication).
      operationId: checkFeatureAccess
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
            example: '12345'
        - name: feature
          in: path
          required: true
          description: Feature to check access for
          schema:
            type: string
            example: 'personalized-coaching'
      responses:
        '200':
          description: Feature access status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Feature access checked successfully'
                  data:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /memberships/pending/{userId}:
    get:
      tags:
        - UserMembership
      summary: Get pending memberships
      description: Retrieves all pending memberships for a specific user (requires authentication).
      operationId: getPendingMemberships
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: List of pending memberships
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Pending memberships fetched successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserMembership'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /memberships/history/{userId}:
    get:
      tags:
        - UserMembership
      summary: Get membership history
      description: Retrieves the membership history for a specific user (requires authentication).
      operationId: getMembershipHistory
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of memberships per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: Membership history
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Membership history fetched successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserMembership'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /memberships/status/{userId}:
    get:
      tags:
        - UserMembership
      summary: Get membership status
      description: Retrieves the membership status for a specific user, including active plan details and upgrade eligibility (requires authentication).
      operationId: getMembershipStatus
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Membership status details
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Membership status fetched successfully'
                  data:
                    $ref: '#/components/schemas/MembershipStatus'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /memberships/upgrade-options/{userId}:
    get:
      tags:
        - UserMembership
      summary: Get upgrade options
      description: Retrieves available membership plan upgrade options for a specific user (requires user role).
      operationId: getUpgradeOptions
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Available upgrade options
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Upgrade options fetched successfully'
                  data:
                    type: object
                    properties:
                      currentPlan:
                        $ref: '#/components/schemas/MembershipPlan'
                      upgradeOptions:
                        type: array
                        items:
                          $ref: '#/components/schemas/MembershipPlanWithRecommendation'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /memberships/can-upgrade/{userId}/{planId}:
    get:
      tags:
        - UserMembership
      summary: Check if user can upgrade to a specific plan
      description: Checks if a user can upgrade to a specific membership plan (requires user role).
      operationId: canUpgradePlan
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
            example: '12345'
        - name: planId
          in: path
          required: true
          description: ID of the target membership plan
          schema:
            type: string
            example: 'plan-001'
      responses:
        '200':
          description: Upgrade eligibility status
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Upgrade check completed'
                  data:
                    type: object
                    properties:
                      canUpgrade:
                        type: boolean
                        example: true
                      reason:
                        type: string
                        example: 'Có thể nâng cấp'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /payments/create-payment-url:
    post:
      tags:
        - Payment
      summary: Create payment URL
      description: Generates a payment URL for a membership plan purchase (requires authentication).
      operationId: createPaymentUrl
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreateRequest'
        required: true
      responses:
        '200':
          description: Payment URL created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  paymentUrl:
                    type: string
                    format: uri
                    example: 'https://vnpay.vn/payment/12345'
                  orderId:
                    type: string
                    example: '60f7b3b3b3b3b3b3b3b3b3b3'
                  orderCode:
                    type: string
                    example: 'ORDER-1642771200000-123456'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /payments/vnpay-callback:
    get:
      tags:
        - Payment
      summary: Handle VNPay payment callback
      description: Handles the callback from VNPay after payment processing.
      operationId: handleVnpayCallback
      parameters:
        - name: vnp_TxnRef
          in: query
          required: true
          description: Order code from VNPay
          schema:
            type: string
            example: 'ORDER-1642771200000-123456'
        - name: vnp_ResponseCode
          in: query
          required: true
          description: Response code from VNPay (00 = success)
          schema:
            type: string
            example: '00'
        - name: vnp_TransactionNo
          in: query
          required: false
          description: Transaction number from VNPay
          schema:
            type: string
            example: '14027712'
        - name: vnp_Amount
          in: query
          required: false
          description: Payment amount
          schema:
            type: string
            example: '2999900'
      responses:
        '200':
          description: Payment callback processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Payment verified successfully'
        '500':
          description: Payment verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /payments/momo-callback:
    post:
      tags:
        - Payment
      summary: Handle MoMo payment callback
      description: Handles the callback from MoMo after payment processing.
      operationId: handleMomoCallback
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                orderId:
                  type: string
                  example: 'ORDER-1642771200000-123456'
                resultCode:
                  type: string
                  example: '0'
                amount:
                  type: number
                  example: 29999
                transactionId:
                  type: string
                  example: '2744180497'
                signature:
                  type: string
                  example: 'abc123signature'
                requestId:
                  type: string
                  example: 'MOMO1642771200000'
        required: true
      responses:
        '200':
          description: Payment callback processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Payment verified successfully'
        '500':
          description: Payment verification failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /payments/status/{orderId}:
    get:
      tags:
        - Payment
      summary: Check payment status
      description: Checks the payment status for a specific order (requires authentication).
      operationId: getPaymentStatus
      security:
        - BearerAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of the order to check status
          schema:
            type: string
            example: '60f7b3b3b3b3b3b3b3b3b3b3'
      responses:
        '200':
          description: Payment status retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/PaymentStatusResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Order not found or access denied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /payments/history:
    get:
      tags:
        - Payment
      summary: Get payment history
      description: Retrieves payment history for the authenticated user with pagination.
      operationId: getPaymentHistory
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of payments per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            example: 10
      responses:
        '200':
          description: Payment history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/PaymentHistoryResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/users:
    get:
      tags:
        - ChatMessage
      summary: Get users for sidebar
      description: Retrieves a list of users for the chat sidebar (requires authentication).
      operationId: getUsersForSidebar
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'  
  /chat/conversations:
    get:
      tags:
        - ChatMessage
      summary: Get conversations
      description: Retrieves all conversations for the authenticated user.
      operationId: getConversations
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of conversations per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/unread-count:
    get:
      tags:
        - ChatMessage
      summary: Get unread message count
      description: Retrieves the count of unread messages for the authenticated user.
      operationId: getUnreadCount
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Unread message count
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer
                    example: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/messages/{receiverId}:
    get:
      tags:
        - ChatMessage
      summary: Get messages with a user
      description: Retrieves all messages between the authenticated user and a specific receiver.
      operationId: getMessages
      security:
        - BearerAuth: []
      parameters:
        - name: receiverId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of messages per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - ChatMessage
      summary: Send a message
      description: Sends a message to a specific user.
      operationId: sendMessage
      security:
        - BearerAuth: []
      parameters:
        - name: receiverId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
        required: true
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/mark-read/{senderId}:
    put:
      tags:
        - ChatMessage
      summary: Mark messages as read
      description: Marks messages from a specific sender as read for the authenticated user.
      operationId: markAsRead
      security:
        - BearerAuth: []
      parameters:
        - name: senderId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Messages marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sender not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/messages/{messageId}:
    delete:
      tags:
        - ChatMessage
      summary: Delete a message
      description: Deletes a specific message (requires authentication).
      operationId: deleteMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            example: 'msg-12345'
      responses:
        '200':
          description: Message deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans:
    get:
      tags:
        - QuitPlan
      summary: Get quit plans
      description: Retrieves a list of quit plans filtered by user ID, coach ID, or status with pagination.
      operationId: getQuitPlans
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          description: Filter by user ID
          schema:
            type: string
            example: '12345'
        - name: coachId
          in: query
          description: Filter by coach ID
          schema:
            type: string
            example: '67890'
        - name: status
          in: query
          description: Filter by quit plan status
          schema:
            type: string
            enum:
              - template
              - pending
              - ongoing
              - completed
              - failed
            example: 'ongoing'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of quit plans per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of quit plans with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  quitPlans:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitPlan'
                  total:
                    type: integer
                    example: 50
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid query parameters (e.g., invalid userId, coachId, or status)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - QuitPlan
      summary: Create a new quit plan template
      description: Creates a new quit plan template using duration (requires coach role). Coach chỉ cần nhập số ngày, không cần startDate/endDate. Dates sẽ được tính tự động khi user đăng ký.
      operationId: createQuitPlan
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuitPlanCreateRequest'
            example:
              title: "Kế hoạch cai thuốc 30 ngày"
              reason: "Cải thiện sức khỏe và tiết kiệm chi phí"
              duration: 30
              image: "https://example.com/plan-image.jpg"
        required: true
      responses:
        '201':
          description: Quit plan template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlan'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not a coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data (e.g., missing title, reason, hoặc duration)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{id}:
    get:
      tags:
        - QuitPlan
      summary: Get quit plan by ID
      description: Retrieves a quit plan and its associated badges by ID.
      operationId: getQuitPlanById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Quit plan and associated badges
          content:
            application/json:
              schema:
                type: object
                properties:
                  quitPlan:
                    $ref: '#/components/schemas/QuitPlan'
                  badges:
                    type: array
                    items:
                      $ref: '#/components/schemas/Badge'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - QuitPlan
      summary: Update a quit plan
      description: Updates an existing quit plan (requires coach or user ownership).
      operationId: updateQuitPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuitPlanUpdateRequest'
        required: true
      responses:
        '200':
          description: Quit plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlan'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not own the plan or is not the coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - QuitPlan
      summary: Delete a quit plan
      description: Deletes a quit plan and its associated stages and badges (requires coach ownership).
      operationId: deleteQuitPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Quit plan deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not the coach of the plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{quitPlanId}/stages:
    get:
      tags:
        - QuitPlanStage
      summary: Get quit plan stages
      description: Retrieves all stages for a specific quit plan with pagination.
      operationId: getQuitPlanStages
      security:
        - BearerAuth: []
      parameters:
        - name: quitPlanId
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of stages per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of quit plan stages with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  stages:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitPlanStage'
                  total:
                    type: integer
                    example: 20
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid query parameters (e.g., invalid quitPlanId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - QuitPlanStage
      summary: Create a new quit plan stage
      description: Creates a new stage for a quit plan template using duration (requires coach role). The quitPlanId is automatically extracted from the URL path. Coach chỉ cần nhập số ngày, dates sẽ được tính tự động khi user đăng ký. Note - quitPlanId should NOT be included in the request body as it's taken from the URL.
      operationId: createQuitPlanStage
      security:
        - BearerAuth: []
      parameters:
        - name: quitPlanId
          in: path
          required: true
          description: ID of the quit plan template (should be a valid ObjectId format)
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuitPlanStageCreateRequest'
            example:
              stage_name: "Giai đoạn 1: Giảm dần"
              description: "Giảm 50% lượng thuốc lá"
              order_index: 1
              duration: 10
        required: true
      responses:
        '200':
          description: Quit plan stage created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlanStage'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not a coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data (e.g., duration vượt quá plan duration, missing required fields, hoặc invalid ObjectId format)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  status: "fail"
                  message: "Failed to create quit plan stage: Quit plan not found"
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
                example:
                  status: "fail" 
                  message: "Failed to create quit plan stage: Quit plan not found"
  /plans/quitplans/{quitPlanId}/duration-stats:
    get:
      tags:
        - QuitPlanStage
      summary: Get plan duration statistics (Coach only)
      description: Retrieves duration statistics for a quit plan template, including total stage duration and remaining duration.
      operationId: getQuitPlanDurationStats
      security:
        - BearerAuth: []
      parameters:
        - name: quitPlanId
          in: path
          required: true
          description: ID of the quit plan template
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Plan duration statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Quit plan duration stats fetched successfully'
                  data:
                    $ref: '#/components/schemas/PlanDurationStats'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not a coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplan-stages/{id}:
    put:
      tags:
        - QuitPlanStage
      summary: Update a quit plan stage
      description: Updates an existing quit plan stage (requires coach role).
      operationId: updateQuitPlanStage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan stage
          schema:
            type: string
            example: 'stage-12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuitPlanStageUpdateRequest'
        required: true
      responses:
        '200':
          description: Quit plan stage updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlanStage'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not a coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan stage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - QuitPlanStage
      summary: Delete a quit plan stage
      description: Deletes a quit plan stage (requires coach ownership).
      operationId: deleteQuitPlanStage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan stage
          schema:
            type: string
            example: 'stage-12345'
      responses:
        '200':
          description: Quit plan stage deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not the coach of the plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan stage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{quitPlanId}/badges:
    get:
      tags:
        - Badge
      summary: Get quit plan badges
      description: Retrieves all badges for a specific quit plan with pagination.
      operationId: getQuitPlanBadges
      security:
        - BearerAuth: []
      parameters:
        - name: quitPlanId
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of badges per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of badges with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  badges:
                    type: array
                    items:
                      $ref: '#/components/schemas/Badge'
                  total:
                    type: integer
                    example: 20
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Badge
      summary: Award a badge to a quit plan
      description: Awards a badge to a quit plan user (requires coach role).
      operationId: awardBadge
      security:
        - BearerAuth: []
      parameters:
        - name: quitPlanId
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadgeCreateRequest'
        required: true
      responses:
        '201':
          description: Badge awarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badge'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not a coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data (e.g., missing name or description)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/select:
    post:
      tags:
        - QuitPlan
      summary: Select a template quit plan
      description: Allows a user to select and activate a template quit plan created by a coach. System sẽ tự động tính startDate (hôm nay), endDate và dates cho tất cả stages dựa trên duration của template.
      operationId: selectQuitPlan
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - quitPlanId
              properties:
                quitPlanId:
                  type: string
                  example: 'template-plan-123'
                  description: ID of the template plan to select
            example:
              quitPlanId: "template-plan-123"
        required: true
      responses:
        '201':
          description: Quit plan selected and created successfully với dates được tính tự động
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlan'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request (e.g., user already has an ongoing plan, không phải template plan)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/current:
    get:
      tags:
        - QuitPlan
      summary: Get current quit plan
      description: Retrieves the current ongoing quit plan for the authenticated user, including stages and progress.
      operationId: getUserCurrentPlan
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current quit plan with stages and progress, or null if no ongoing plan exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan:
                    $ref: '#/components/schemas/QuitPlan'
                    nullable: true
                  stages:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitPlanStage'
                  progress:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitProgress'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplan-stages/{id}/complete:
    put:
      tags:
        - QuitPlanStage
      summary: Complete a quit plan stage (Manual)
      description: Manually marks a quit plan stage as completed. Note - Stages are normally auto-completed when users log daily progress for all required days. If all stages are completed, the plan is marked as completed and a badge is awarded.
      operationId: completeStage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan stage
          schema:
            type: string
            example: 'stage-12345'
      responses:
        '200':
          description: Stage completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Stage completed successfully'
                  planCompleted:
                    type: boolean
                    example: false
                    description: Indicates if the entire plan was completed
                  completedStages:
                    type: integer
                    example: 3
                    description: Number of stages completed
                  totalStages:
                    type: integer
                    example: 5
                    description: Total number of stages in the plan
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stage or quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request (e.g., stage not part of user's ongoing plan)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{planId}/complete:
    put:
      tags:
        - QuitPlan
      summary: Complete a quit plan
      description: Manually marks a quit plan as completed and awards a badge to the user.
      operationId: completePlan
      security:
        - BearerAuth: []
      parameters:
        - name: planId
          in: path
          required: true
          description: ID of the quit plan to complete
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Plan completed successfully and badge awarded
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Plan completed successfully! Badge awarded.'
                  data:
                    type: object
                    properties:
                      plan:
                        $ref: '#/components/schemas/QuitPlan'
                      badge:
                        $ref: '#/components/schemas/Badge'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found or not ongoing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request (e.g., plan not owned by user or not in ongoing status)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{id}/fail:
    put:
      tags:
        - QuitPlan
      summary: Mark quit plan as failed
      description: Allows a user to mark their ongoing quit plan as failed.
      operationId: failQuitPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Quit plan marked as failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlan'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found or not ongoing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/template:
    get:
      tags:
        - QuitPlan
      summary: Get template quit plans
      description: Retrieves a list of template quit plans filtered by coach ID with pagination.
      operationId: getTemplatePlans
      security:
        - BearerAuth: []
      parameters:
        - name: coachId
          in: query
          description: Filter by coach ID
          required: true
          schema:
            type: string
            example: '67890'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of template plans per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of template quit plans with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  quitPlans:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitPlan'
                  total:
                    type: integer
                    example: 20
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid query parameters (e.g., missing or invalid coachId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/history:
    get:
      tags:
        - QuitPlan
      summary: Get user plan history
      description: Retrieves all plan history for the authenticated user, including completion statistics and badges.
      operationId: getAllUserPlanHistory
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User plan history retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User plan history fetched successfully'
                  data:
                    $ref: '#/components/schemas/UserPlanHistoryResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{planId}/completion:
    get:
      tags:
        - QuitPlan
      summary: Get plan completion details
      description: Retrieves detailed completion information for a specific quit plan, including stages, progress, and badges.
      operationId: getCompleteByPlanId
      security:
        - BearerAuth: []
      parameters:
        - name: planId
          in: path
          required: true
          description: ID of the quit plan to get completion details for
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Plan completion details retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Plan completion details fetched successfully'
                  data:
                    $ref: '#/components/schemas/PlanCompletionResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid plan ID format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /badges/my:
    get:
      tags:
        - Badge
      summary: Get user's badges
      description: Retrieves all badges that the authenticated user has earned.
      operationId: getUserBadges
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User badges retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'User badges retrieved successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/UserBadgeResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /badges/all:
    get:
      tags:
        - Badge
      summary: Get all available badges (Admin/Coach only)
      description: Retrieves all badges that can be awarded in the system.
      operationId: getAllBadges
      security:
        - BearerAuth: []
      responses:
        '200':
          description: All badges retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'All badges retrieved successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Badge'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin or Coach role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /badges/create-for-plan:
    post:
      tags:
        - Badge
      summary: Create a badge for a specific quit plan template (Coach only)
      description: Allows a coach to create a badge for a specific quit plan template. When a user completes a plan from this template, they will automatically receive this badge.
      operationId: createBadgeForPlan
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadgeCreateForPlanRequest'
        required: true
      responses:
        '201':
          description: Badge created for plan successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Badge created for plan successfully'
                  data:
                    $ref: '#/components/schemas/Badge'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Coach role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /badges/award:
    post:
      tags:
        - Badge
      summary: Award a badge to user (Admin/Coach only)
      description: Awards an existing badge to a specific user.
      operationId: awardBadgeToUser
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AwardBadgeRequest'
        required: true
      responses:
        '201':
          description: Badge awarded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Badge awarded successfully'
                  data:
                    $ref: '#/components/schemas/UserBadgeAwardResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin or Coach role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data or user already has this badge
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or Badge not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'


  /quitprogress:
    post:
      tags:
        - QuitProgress
      summary: Create daily quit progress
      description: Creates a new daily quit progress record for the authenticated user (requires user role). System automatically checks if stage is completed when user logs progress for all required days. Only one progress entry per stage per day is allowed.
      operationId: createQuitProgress
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuitProgressCreateRequest"
        required: true
      responses:
        '200':
          description: Quit progress created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitProgress'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data (e.g., missing required fields, invalid stageId, or progress already exists for this date)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '409':
          description: Conflict - Progress for this date already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - QuitProgress
      summary: Get quit progress records
      description: Retrieves a list of quit progress records filtered by userId, stageId, or date with pagination (requires user role).
      operationId: getQuitProgresses
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          description: Filter by user ID
          schema:
            type: string
            example: '54321'
        - name: stageId
          in: query
          description: Filter by stage ID
          schema:
            type: string
            example: 'stage-12345'
        - name: date
          in: query
          description: Filter by date (format YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-06-02'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of quit progress records per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of quit progress records with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  progresses:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitProgress'
                  total:
                    type: integer
                    example: 20
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid query parameters (e.g., invalid userId or stageId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /quitprogress/{id}:
    get:
      tags:
        - QuitProgress
      summary: Get quit progress by ID
      description: Retrieves a quit progress record by its ID (requires user role).
      operationId: getQuitProgress
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit progress record
          schema:
            type: string
            example: 'progress-12345'
      responses:
        '200':
          description: Quit progress details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitProgress'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit progress not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - QuitProgress
      summary: Update a quit progress
      description: Updates an existing quit progress record (requires user role and ownership).
      operationId: updateQuitProgress
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit progress record
          schema:
            type: string
            example: 'progress-12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuitProgressUpdateRequest"
        required: true
      responses:
        '200':
          description: Quit progress updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitProgress'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not own the progress record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit progress not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - QuitProgress
      summary: Delete a quit progress
      description: Deletes a quit progress record (requires user or admin role).
      operationId: deleteQuitProgress
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit progress record
          schema:
            type: string
            example: 'progress-12345'
      responses:
        '200':
          description: Quit progress deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit progress not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
  /quitprogress/stage/{stageId}/stats:
    get:
      tags:
        - QuitProgress
      summary: Get stage progress statistics
      description: Retrieves detailed statistics about progress for a specific stage, including completion percentage and daily entries.
      operationId: getStageProgressStats
      security:
        - BearerAuth: []
      parameters:
        - name: stageId
          in: path
          required: true
          description: ID of the stage to get statistics for
          schema:
            type: string
            example: 'stage-12345'
      responses:
        '200':
          description: Stage progress statistics retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StageProgressStats'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid stage ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /quitprogress/check-auto-complete:
    post:
      tags:
        - QuitProgress
      summary: Check and auto-complete user stages
      description: Checks all stages for the authenticated user and automatically completes those that meet the 75% completion threshold (user only).
      operationId: checkAndAutoCompleteStages
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Auto-complete check completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Checked and auto-completed stages successfully'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /quitprogress/process-expired-stages:
    post:
      tags:
        - QuitProgress
      summary: Process expired stages for user
      description: Processes all expired stages for the authenticated user and automatically marks them as completed or failed based on progress (user only).
      operationId: processExpiredStages
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Expired stages processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Processed expired stages successfully'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /quitprogress/send-test-reminder:
    post:
      tags:
        - QuitProgress
      summary: Send test reminder emails
      description: Manually triggers the daily reminder email system to send reminder emails to users who haven't updated their progress today (admin only).
      operationId: sendTestReminder
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Test reminder emails sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Test reminder emails sent successfully'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /quitprogress/check-failed-plans:
    post:
      tags:
        - QuitProgress
      summary: Check for failed quit plans
      description: Checks all ongoing quit plans and automatically marks as failed those that don't meet daily progress requirements (admin only).
      operationId: checkFailedPlans
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Failed plans check completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Checked failed plans successfully'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /monitor/status:
    get:
      tags:
        - PlanMonitor
      summary: Get user plan status and risk level
      description: Retrieves the current plan status and risk assessment for the authenticated user.
      operationId: getUserPlanStatus
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User plan status and risk level retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Plan status retrieved successfully'
                  data:
                    $ref: '#/components/schemas/PlanStatus'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /monitor/alerts:
    get:
      tags:
        - PlanMonitor
      summary: Get user alerts and notifications
      description: Retrieves warnings and notifications for the authenticated user based on their plan progress.
      operationId: getUserAlerts
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User alerts retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Alerts retrieved successfully'
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Alert'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /monitor/plans-at-risk:
    get:
      tags:
        - PlanMonitor
      summary: Get plans at risk (Admin only)
      description: Retrieves all plans that are at risk of failure for admin oversight.
      operationId: getPlansAtRisk
      security:
        - BearerAuth: []
      parameters:
        - name: riskLevel
          in: query
          description: Filter by risk level
          schema:
            type: string
            enum: ['low', 'medium', 'high', 'critical']
            example: 'high'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of plans per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: Plans at risk retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Plans at risk retrieved successfully'
                  data:
                    type: object
                    properties:
                      plans:
                        type: array
                        items:
                          $ref: '#/components/schemas/PlanRiskInfo'
                      total:
                        type: integer
                        example: 15
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /monitor/stats:
    get:
      tags:
        - PlanMonitor
      summary: Get system-wide statistics (Admin only)
      description: Retrieves comprehensive statistics about all plans in the system for admin dashboard.
      operationId: getSystemStats
      security:
        - BearerAuth: []
      responses:
        '200':
          description: System statistics retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'System statistics retrieved successfully'
                  data:
                    $ref: '#/components/schemas/SystemStats'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /monitor/trigger-check:
    post:
      tags:
        - PlanMonitor
      summary: Trigger emergency plan check (Admin only)
      description: Manually triggers an emergency check of all ongoing plans to identify and mark failed plans.
      operationId: triggerEmergencyCheck
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Emergency check triggered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Emergency check triggered successfully'
                  data:
                    type: object
                    properties:
                      checkedPlans:
                        type: integer
                        example: 25
                      failedPlans:
                        type: integer
                        example: 3
                      timestamp:
                        type: string
                        format: date-time
                        example: '2025-01-21T10:30:00.000Z'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - Admin role required
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'user@gmail.com'
        password:
          type: string
          format: password
          example: 'password123'
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'Login successful'
        data:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
                  example: '12345'
                email:
                  type: string
                  example: 'user@example.com'
                role:
                  type: string
                  enum: ['admin', 'user', 'coach']
                  example: 'user'
            token:
              type: string
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
      required:
        - status
        - message
        - data
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
        password:
          type: string
          format: password
          example: 'password123'
        confirmPassword:
          type: string
          format: password
          example: 'password123'
        userName:
          type: string
          example: 'john_doe'
      required:
        - email
        - password
        - confirmPassword
        - userName
    RefreshTokenRequest:
      type: object
      properties:
        refreshToken:
          type: string
          example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
      required:
        - refreshToken
    ForgotPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
      required:
        - email
    ResetPasswordRequest:
      type: object
      properties:
        token:
          type: string
          example: 'reset-token-123'
        newPassword:
          type: string
          format: password
          example: 'newpassword123'
      required:
        - token
        - newPassword
    User:
      type: object
      properties:
        _id:
          type: string
          example: '12345'
        userName:
          type: string
          example: 'john_doe'
        email:
          type: string
          format: email
          example: 'user@example.com'
        role:
          type: string
          enum: ['admin', 'user', 'coach']
          example: 'user'
        gender:
          type: string
          enum: ['male', 'female', 'other']
          example: 'male'
        bio:
          type: string
          nullable: true
          example: 'Passionate about health and wellness'
        dateOfBirth:
          type: string
          format: date
          example: '1990-01-01'
        profilePicture:
          type: string
          format: uri
          example: 'https://example.com/profile.jpg'
        phone:
          type: string
          nullable: true
          example: '+84901234567'
        address:
          type: string
          nullable: true
          example: '123 Main St, City'
        isActive:
          type: boolean
          example: true
        smokingFreeDays:
          type: integer
          example: 30
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - userName
        - email
        - role
    UserUpdateRequest:
      type: object
      properties:
        userName:
          type: string
          example: 'john_doe_updated'
        gender:
          type: string
          enum: ['male', 'female', 'other']
          example: 'male'
        bio:
          type: string
          example: 'Updated bio'
        dateOfBirth:
          type: string
          format: date
          example: '1990-01-01'
        phone:
          type: string
          example: '+84901234567'
        address:
          type: string
          example: '123 Updated St, City'
    UserStats:
      type: object
      properties:
        blogsCount:
          type: integer
          example: 10
        surveysCount:
          type: integer
          example: 5
        quitPlansCount:
          type: integer
          example: 2
        smokingFreeDays:
          type: integer
          example: 30
    ChangePasswordRequest:
      type: object
      properties:
        currentPassword:
          type: string
          format: password
          example: 'currentpassword123'
        newPassword:
          type: string
          format: password
          example: 'newpassword123'
      required:
        - currentPassword
        - newPassword
    AvatarUploadRequest:
      type: object
      properties:
        avatar:
          type: string
          format: binary
          description: Avatar image file
    MembershipPlan:
      type: object
      properties:
        _id:
          type: string
          example: 'plan-001'
        name:
          type: string
          example: 'Premium Plan'
        description:
          type: string
          example: 'Access to premium features'
        price:
          type: number
          example: 29.99
        duration:
          type: integer
          example: 30
        features:
          type: array
          items:
            type: string
          example: ['feature1', 'feature2']
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - name
        - price
        - duration
    MembershipPlanCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Premium Plan'
        description:
          type: string
          example: 'Access to premium features'
        price:
          type: number
          example: 29.99
        duration:
          type: integer
          example: 30
        features:
          type: array
          items:
            type: string
          example: ['feature1', 'feature2']
      required:
        - name
        - price
        - duration
    MembershipPlanUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Updated Premium Plan'
        description:
          type: string
          example: 'Updated description'
        price:
          type: number
          example: 39.99
        duration:
          type: integer
          example: 30
        features:
          type: array
          items:
            type: string
          example: ['feature1', 'feature2', 'feature3']
    UserMembership:
      type: object
      properties:
        _id:
          type: string
          example: 'membership-12345'
        userId:
          type: string
          example: '12345'
        memberShipPlanId:
          type: string
          example: 'plan-001'
        startDate:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        endDate:
          type: string
          format: date-time
          example: '2025-01-31T23:59:59.999Z'
        paymentStatus:
          type: string
          enum: ['pending', 'paid', 'failed']
          example: 'paid'
        price:
          type: number
          example: 29.99
        paymentInfo:
          type: object
          properties:
            orderId:
              type: string
              example: 'order-12345'
            amount:
              type: number
              example: 29.99
            createDate:
              type: string
              example: '20250101123000'
            transactionId:
              type: string
              example: 'txn-12345'
            paymentDate:
              type: string
              format: date-time
              example: '2025-01-01T12:30:00.000Z'
            bankCode:
              type: string
              example: 'NCB'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - userId
        - memberShipPlanId
        - startDate
        - endDate
        - paymentStatus
        - price
    UserMembershipRegisterRequest:
      type: object
      properties:
        packageId:
          type: string
          example: 'plan-001'
          description: ID of the membership plan to register for
        durationType:
          type: string
          enum: ['week', 'month']
          example: 'month'
          description: Duration type for the membership
      required:
        - packageId
        - durationType
    MembershipStatus:
      type: object
      properties:
        hasActiveMembership:
          type: boolean
          example: true
          description: Indicates if the user has an active membership
        currentPlan:
          $ref: '#/components/schemas/MembershipPlan'
          description: The user's current membership plan
        features:
          type: array
          items:
            type: string
          example: ['personalized-coaching', 'progress-tracking']
          description: Features available in the current plan
        daysLeft:
          type: integer
          example: 15
          description: Number of days left in the active membership
        isExpiringSoon:
          type: boolean
          example: false
          description: Indicates if the membership is expiring within 7 days
        endDate:
          type: string
          format: date-time
          example: '2025-06-21T23:59:59.999Z'
          nullable: true
          description: End date of the active membership
        canUpgrade:
          type: boolean
          example: true
          description: Indicates if the user can upgrade to a higher plan
      required:
        - hasActiveMembership
        - currentPlan
        - features
        - daysLeft
        - isExpiringSoon
        - canUpgrade
    MembershipPlanWithRecommendation:
      type: object
      properties:
        _id:
          type: string
          example: 'plan-001'
        name:
          type: string
          example: 'Pro Plan'
        description:
          type: string
          example: 'Access to advanced features'
        price:
          type: number
          example: 19.99
        duration:
          type: integer
          example: 30
        features:
          type: array
          items:
            type: string
          example: ['personalized-coaching', 'progress-tracking']
        isActive:
          type: boolean
          example: true
        isRecommended:
          type: boolean
          example: true
          description: Indicates if the plan is recommended for the user
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - name
        - price
        - duration
        - isRecommended
    PaymentCreateRequest:
      type: object
      properties:
        memberShipPlanId:
          type: string
          example: 'plan-001'
          description: ID of the membership plan to purchase
        paymentMethod:
          type: string
          enum: ['vnpay', 'momo']
          example: 'vnpay'
          description: Payment method to use
        amount:
          type: number
          minimum: 1
          example: 29999
          description: Payment amount in VND (without decimal points)
      required:
        - memberShipPlanId
        - paymentMethod
        - amount
    PaymentStatusResponse:
      type: object
      properties:
        order:
          type: object
          properties:
            id:
              type: string
              example: '60f7b3b3b3b3b3b3b3b3b3b3'
            orderCode:
              type: string
              example: 'ORDER-1642771200000-123456'
            status:
              type: string
              enum: ['pending', 'processing', 'completed', 'cancelled']
              example: 'completed'
            totalAmount:
              type: number
              example: 29999
            createdAt:
              type: string
              format: date-time
              example: '2025-01-21T10:30:00.000Z'
            memberShipPlan:
              $ref: '#/components/schemas/MembershipPlan'
        payment:
          type: object
          properties:
            id:
              type: string
              example: '60f7b3b3b3b3b3b3b3b3b3b4'
            paymentMethod:
              type: string
              enum: ['vnpay', 'momo']
              example: 'vnpay'
            status:
              type: string
              enum: ['pending', 'processing', 'success', 'failed', 'cancelled']
              example: 'success'
            amount:
              type: number
              example: 29999
            transactionId:
              type: string
              nullable: true
              example: '14027712'
            paymentDate:
              type: string
              format: date-time
              example: '2025-01-21T10:30:00.000Z'
      required:
        - order
        - payment
    PaymentHistoryResponse:
      type: object
      properties:
        payments:
          type: array
          items:
            $ref: '#/components/schemas/PaymentHistoryItem'
        pagination:
          type: object
          properties:
            currentPage:
              type: integer
              example: 1
            totalPages:
              type: integer
              example: 5
            totalRecords:
              type: integer
              example: 47
            limit:
              type: integer
              example: 10
      required:
        - payments
        - pagination
    PaymentHistoryItem:
      type: object
      properties:
        order:
          type: object
          properties:
            id:
              type: string
              example: '60f7b3b3b3b3b3b3b3b3b3b3'
            orderCode:
              type: string
              example: 'ORDER-1642771200000-123456'
            status:
              type: string
              enum: ['pending', 'processing', 'completed', 'cancelled']
              example: 'completed'
            totalAmount:
              type: number
              example: 29999
            createdAt:
              type: string
              format: date-time
              example: '2025-01-21T10:30:00.000Z'
            memberShipPlan:
              $ref: '#/components/schemas/MembershipPlan'
        payment:
          type: object
          nullable: true
          properties:
            id:
              type: string
              example: '60f7b3b3b3b3b3b3b3b3b3b4'
            paymentMethod:
              type: string
              enum: ['vnpay', 'momo']
              example: 'vnpay'
            status:
              type: string
              enum: ['pending', 'processing', 'success', 'failed', 'cancelled']
              example: 'success'
            amount:
              type: number
              example: 29999
            transactionId:
              type: string
              nullable: true
              example: '14027712'
            paymentDate:
              type: string
              format: date-time
              example: '2025-01-21T10:30:00.000Z'
    Survey:
      type: object
      properties:
        _id:
          type: string
          example: '67890'
        title:
          type: string
          example: 'Health Assessment Survey'
        description:
          type: string
          example: 'A survey to assess current health status'
        questions:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
                example: 'How often do you smoke per day?'
              type:
                type: string
                enum: ['text', 'multiple-choice', 'rating']
                example: 'multiple-choice'
              options:
                type: array
                items:
                  type: string
                example: ['0-5', '6-10', '11-20', '20+']
        userId:
          type: string
          example: '12345'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - title
        - questions
        - userId
    SurveyCreateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Health Assessment Survey'
        description:
          type: string
          example: 'A survey to assess current health status'
        questions:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
                example: 'How often do you smoke per day?'
              type:
                type: string
                enum: ['text', 'multiple-choice', 'rating']
                example: 'multiple-choice'
              options:
                type: array
                items:
                  type: string
                example: ['0-5', '6-10', '11-20', '20+']
      required:
        - title
        - questions
    SurveyUpdateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Updated Health Assessment Survey'
        description:
          type: string
          example: 'Updated description'
        questions:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
                example: 'Updated question'
              type:
                type: string
                enum: ['text', 'multiple-choice', 'rating']
                example: 'multiple-choice'
              options:
                type: array
                items:
                  type: string
                example: ['option1', 'option2']
    ChatMessage:
      type: object
      properties:
        _id:
          type: string
          example: 'msg-12345'
        senderId:
          type: string
          example: '12345'
        receiverId:
          type: string
          example: '67890'
        message:
          type: string
          example: 'Hello, how are you?'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - senderId
        - receiverId
        - message
    ChatMessageRequest:
      type: object
      properties:
        message:
          type: string
          example: 'Hello, how are you?'
      required:
        - message
    Conversation:
      type: object
      properties:
        _id:
          type: string
          example: 'conv-12345'
        participants:
          type: array
          items:
            type: string
          example: ['12345', '67890']
        lastMessage:
          $ref: '#/components/schemas/ChatMessage'
        unreadCount:
          type: integer
          example: 3
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - participants
    QuitPlan:
      type: object
      properties:
        _id:
          type: string
          example: '12345'
        coachId:
          type: object
          properties:
            _id:
              type: string
              example: '67890'
            userName:
              type: string
              example: 'Coach John'
            email:
              type: string
              example: 'john@example.com'
        userId:
          type: object
          nullable: true
          properties:
            _id:
              type: string
              example: '54321'
            userName:
              type: string
              example: 'Jane Doe'
            email:
              type: string
              example: 'jane@example.com'
        templateId:
          type: string
          nullable: true
          example: 'template-abc123'
          description: 'ID of the original template plan (only when user registers from template)'
        title:
          type: string
          example: 'Kế hoạch cai thuốc 30 ngày'
        reason:
          type: string
          example: 'Cải thiện sức khỏe và tiết kiệm chi phí'
        image:
          type: string
          nullable: true
          example: 'https://example.com/plan-image.jpg'
        startDate:
          type: string
          format: date-time
          nullable: true
          example: '2025-01-21T13:46:00.000Z'
          description: 'Ngày bắt đầu thực tế (chỉ có khi user đăng ký)'
        endDate:
          type: string
          format: date-time
          nullable: true
          example: '2025-02-20T13:46:00.000Z'
          description: 'Ngày kết thúc thực tế (chỉ có khi user đăng ký)'
        duration:
          type: integer
          minimum: 1
          maximum: 365
          example: 30
          description: 'Số ngày của kế hoạch (bắt buộc cho template)'
        status:
          type: string
          enum: ['template', 'pending', 'ongoing', 'completed', 'failed']
          example: 'template'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-21T13:46:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-21T13:46:00.000Z'
      required:
        - coachId
        - title
        - reason
        - status
    QuitPlanCreateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Kế hoạch cai thuốc 30 ngày'
        reason:
          type: string
          example: 'Cải thiện sức khỏe và tiết kiệm chi phí'
        image:
          type: string
          nullable: true
          example: 'https://example.com/plan-image.jpg'
        duration:
          type: integer
          minimum: 1
          maximum: 365
          example: 30
          description: 'Số ngày của kế hoạch (bắt buộc cho template)'
      required:
        - title
        - reason
        - duration
    QuitPlanUpdateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Kế hoạch cai thuốc cập nhật'
        reason:
          type: string
          example: 'Lý do cập nhật'
        image:
          type: string
          nullable: true
          example: 'https://example.com/updated-plan-image.jpg'
        duration:
          type: integer
          minimum: 1
          maximum: 365
          example: 35
          description: 'Số ngày của kế hoạch (chỉ cập nhật cho template)'
        status:
          type: string
          enum: ['template', 'pending', 'ongoing', 'completed', 'failed']
          example: 'ongoing'
    QuitPlanStage:
      type: object
      properties:
        _id:
          type: string
          example: 'stage-12345'
        quitPlanId:
          type: string
          example: '12345'
        stage_name:
          type: string
          example: 'Giai đoạn 1: Giảm dần'
        description:
          type: string
          example: 'Giảm 50% lượng thuốc lá'
        order_index:
          type: integer
          example: 1
        start_date:
          type: string
          format: date-time
          nullable: true
          example: '2025-01-21T13:46:00.000Z'
          description: 'Ngày bắt đầu stage (chỉ có khi user đăng ký)'
        end_date:
          type: string
          format: date-time
          nullable: true
          example: '2025-01-31T13:46:00.000Z'
          description: 'Ngày kết thúc stage (chỉ có khi user đăng ký)'
        duration:
          type: integer
          minimum: 1
          maximum: 365
          example: 10
          description: 'Số ngày của giai đoạn này'
        completed:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2025-01-21T13:46:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-21T13:46:00.000Z'
      required:
        - quitPlanId
        - stage_name
        - order_index
        - duration
    QuitPlanStageCreateRequest:
      type: object
      properties:
        stage_name:
          type: string
          example: 'Giai đoạn 1: kudou'
        description:
          type: string
          example: 'Giảm 50% lượng thuốc lá'
        order_index:
          type: integer
          example: 1
        duration:
          type: integer
          minimum: 1
          maximum: 365
          example: 10
          description: 'Số ngày của giai đoạn này'
      required:
        - stage_name
        - order_index
        - duration
      additionalProperties: false
      description: 'Request body for creating a quit plan stage. Note: quitPlanId is taken from URL path and should NOT be included in the request body.'
    QuitPlanStageUpdateRequest:
      type: object
      properties:
        stage_name:
          type: string
          example: 'Giai đoạn 1 cập nhật'
        description:
          type: string
          example: 'Mô tả cập nhật'
        order_index:
          type: integer
          example: 1
        duration:
          type: integer
          minimum: 1
          maximum: 365
          example: 12
          description: 'Số ngày của giai đoạn này (chỉ cập nhật cho template)'
        completed:
          type: boolean
          example: true
    Badge:
      type: object
      properties:
        _id:
          type: string
          example: 'badge-12345'
        quitPlanId:
          type: string
          example: '12345'
        userId:
          type: object
          properties:
            _id:
              type: string
              example: '54321'
            name:
              type: string
              example: 'Jane Doe'
            email:
              type: string
              example: 'jane@example.com'
        name:
          type: string
          example: 'Stage Completed'
        description:
          type: string
          example: 'Completed stage: Week 1'
        awardedAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
      required:
        - quitPlanId
        - userId
        - name
        - awardedAt
    BadgeCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Stage Completed'
        description:
          type: string
          example: 'Completed stage: Week 1'
      required:
        - name
        - description
    QuitProgress:
      type: object
      properties:
        _id:
          type: string
          example: 'progress-12345'
        userId:
          type: string
          example: '54321'
        stageId:
          type: string
          example: 'stage-12345'
        date:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        cigarettesSmoked:
          type: integer
          minimum: 0
          example: 5
        healthStatus:
          type: string
          example: 'Feeling better'
        notes:
          type: string
          example: 'Had some cravings but managed to resist'
        createdAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
      required:
        - userId
        - stageId
        - date
        - cigarettesSmoked
        - healthStatus
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'Operation completed successfully'
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: 'error'
        message:
          type: string
          example: 'Invalid request data'
    QuitProgressCreateRequest:
      type: object
      properties:
        stageId:
          type: string
          example: 'stage-12345'
          description: ID of the quit plan stage
        date:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
          description: Date of the progress record
        cigarettesSmoked:
          type: integer
          minimum: 0
          example: 5
          description: Number of cigarettes smoked on the given date
        healthStatus:
          type: string
          example: 'Feeling better'
          description: User's health status
        notes:
          type: string
          example: 'Had some cravings but managed to resist'
          description: Optional notes about the progress
      required:
        - stageId
        - date
        - cigarettesSmoked
        - healthStatus
    QuitProgressUpdateRequest:
      type: object
      properties:
        stageId:
          type: string
          example: 'stage-12345'
          description: ID of the quit plan stage
        date:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
          description: Date of the progress record
        cigarettesSmoked:
          type: integer
          minimum: 0
          example: 5
          description: Number of cigarettes smoked on the given date
        healthStatus:
          type: string
          example: 'Feeling better'
          description: User's health status
        notes:
          type: string
          example: 'Updated notes'
          description: Optional notes about the progress
    StageProgressStats:
      type: object
      properties:
        stage:
          $ref: '#/components/schemas/QuitPlanStage'
          description: Details of the stage
        totalDays:
          type: integer
          example: 10
          description: Total number of days required for this stage (from duration field)
        completedDays:
          type: integer
          example: 8
          description: Number of days user has logged progress
        daysPassed:
          type: integer
          example: 9
          description: Number of days that have passed since stage started
        daysRemaining:
          type: integer
          example: 1
          description: Number of days remaining until stage duration expires
        remainingDays:
          type: integer
          example: 2
          description: Number of days still needed to log progress
        completionPercentage:
          type: integer
          example: 80
          description: Percentage of completion (0-100)
        isCompleted:
          type: boolean
          example: true
          description: Whether the stage has been completed
        stageStatus:
          type: string
          enum: ['not_started', 'in_progress', 'completed', 'expired']
          example: 'completed'
          description: Current status of the stage
        canComplete:
          type: boolean
          example: true
          description: Whether the stage can be completed (>= 75% progress)
        daysRequiredForCompletion:
          type: integer
          example: 8
          description: Number of days required for 75% completion (75% of totalDays)
        daysUntilCanComplete:
          type: integer
          example: 0
          description: Number of additional days needed to reach 75% completion
        progressEntries:
          type: array
          items:
            $ref: '#/components/schemas/QuitProgress'
          description: List of all progress entries for this stage
      required:
        - stage
        - totalDays
        - completedDays
        - daysPassed
        - daysRemaining
        - remainingDays
        - completionPercentage
        - isCompleted
        - stageStatus
        - canComplete
        - daysRequiredForCompletion
        - daysUntilCanComplete
        - progressEntries
    PlanDurationStats:
      type: object
      properties:
        planDuration:
          type: integer
          example: 30
          description: 'Tổng số ngày của kế hoạch'
        totalStageDuration:
          type: integer
          example: 25
          description: 'Tổng số ngày của tất cả stages đã tạo'
        remainingDuration:
          type: integer
          example: 5
          description: 'Số ngày còn lại có thể tạo thêm stages'
        stagesCount:
          type: integer
          example: 3
          description: 'Số lượng stages đã tạo'
        stages:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 'stage-12345'
              stage_name:
                type: string
                example: 'Giai đoạn 1: Giảm dần'
              duration:
                type: integer
                example: 10
              order_index:
                type: integer
                example: 1
          description: 'Danh sách stages với thông tin duration'
      required:
        - planDuration
        - totalStageDuration
        - remainingDuration
        - stagesCount
        - stages
        - progressEntries
    Blog:
      type: object
      properties:
        _id:
          type: string
          example: 'blog123'
        title:
          type: string
          example: 'Cách bỏ thuốc lá hiệu quả'
        slug:
          type: string
          example: 'cach-bo-thuoc-la-hieu-qua'
        description:
          type: string
          example: 'Bài viết giới thiệu các phương pháp bỏ thuốc lá hiệu quả'
        image:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/images/quit-smoking.jpg'
        tags:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 'tag123'
              tagId:
                type: string
                example: 'quit-smoking'
              tagName:
                type: string
                example: 'quit-smoking'
        likes:
          type: array
          items:
            type: string
            example: 'user123'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        user:
          type: object
          properties:
            _id:
              type: string
              example: 'user123'
            name:
              type: string
              example: 'John Doe'
            email:
              type: string
              format: email
              example: 'john@example.com'
        isDeleted:
          type: boolean
          example: false
        isHidden:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2023-01-15T08:30:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-01-15T08:30:00Z'
      required:
        - _id
        - title
        - slug
        - description
        - user
    BlogCreateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Cách bỏ thuốc lá hiệu quả'
        description:
          type: string
          example: 'Bài viết giới thiệu các phương pháp bỏ thuốc lá hiệu quả'
        image:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/images/quit-smoking.jpg'
        tags:
          type: array
          items:
            type: string
            example: 'quit-smoking'
      required:
        - title
        - description
    BlogUpdateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Cập nhật: Cách bỏ thuốc lá hiệu quả'
        description:
          type: string
          example: 'Nội dung cập nhật về các phương pháp bỏ thuốc lá'
        image:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/images/updated-quit-smoking.jpg'
        tags:
          type: array
          items:
            type: string
            example: 'quit-smoking'
    Comment:
      type: object
      properties:
        _id:
          type: string
          example: 'comment123'
        text:
          type: string
          example: 'Bài viết rất hữu ích!'
        author:
          type: object
          properties:
            _id:
              type: string
              example: 'user123'
            name:
              type: string
              example: 'John Doe'
            email:
              type: string
              format: email
              example: 'john@example.com'
        blog:
          type: string
          example: 'blog123'
        createdAt:
          type: string
          format: date-time
          example: '2023-01-15T09:30:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-01-15T09:30:00Z'
      required:
        - _id
        - text
        - author
    CommentRequest:
      type: object
      properties:
        comment:
          type: string
          example: 'Bài viết rất hữu ích!'
      required:
        - comment
    PlanStatus:
      type: object
      properties:
        status:
          type: string
          enum: ['template', 'pending', 'ongoing', 'completed', 'failed']
          example: 'ongoing'
          description: Current status of the user's quit plan
        riskLevel:
          type: string
          enum: ['none', 'low', 'medium', 'high', 'critical']
          example: 'medium'
          description: Risk level assessment for plan failure
        currentPlan:
          $ref: '#/components/schemas/QuitPlan'
          nullable: true
          description: User's current active quit plan
        daysSinceLastUpdate:
          type: integer
          example: 2
          description: Number of days since last progress update
        missedDays:
          type: integer
          example: 1
          description: Number of missed daily updates
        consecutiveMissedDays:
          type: integer
          example: 1
          description: Number of consecutive missed days
        totalStages:
          type: integer
          example: 5
          description: Total number of stages in the plan
        completedStages:
          type: integer
          example: 2
          description: Number of completed stages
        progressPercentage:
          type: number
          format: float
          example: 40.0
          description: Overall progress percentage
        recommendation:
          type: string
          example: 'Hãy cập nhật tiến độ hằng ngày để tránh thất bại'
          description: Recommendation for the user
      required:
        - status
        - riskLevel
        - daysSinceLastUpdate
        - missedDays
        - consecutiveMissedDays
        - progressPercentage
    Alert:
      type: object
      properties:
        type:
          type: string
          enum: ['warning', 'danger', 'info', 'success']
          example: 'warning'
          description: Type of alert
        level:
          type: string
          enum: ['low', 'medium', 'high', 'critical']
          example: 'medium'
          description: Severity level of the alert
        title:
          type: string
          example: 'Cảnh báo: Chưa cập nhật tiến độ'
          description: Alert title
        message:
          type: string
          example: 'Bạn chưa cập nhật tiến độ trong 2 ngày. Hãy cập nhật ngay để tránh thất bại.'
          description: Detailed alert message
        actionRequired:
          type: boolean
          example: true
          description: Whether immediate action is required
        createdAt:
          type: string
          format: date-time
          example: '2025-01-21T10:30:00.000Z'
          description: When the alert was generated
      required:
        - type
        - level
        - title
        - message
        - actionRequired
        - createdAt
    PlanRiskInfo:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/QuitPlan'
          description: The quit plan at risk
        user:
          type: object
          properties:
            _id:
              type: string
              example: '54321'
            userName:
              type: string
              example: 'john_doe'
            email:
              type: string
              format: email
              example: 'john@example.com'
          description: User information for the plan
        riskLevel:
          type: string
          enum: ['low', 'medium', 'high', 'critical']
          example: 'high'
          description: Risk level of plan failure
        daysSinceLastUpdate:
          type: integer
          example: 4
          description: Days since last progress update
        missedDays:
          type: integer
          example: 3
          description: Total missed days
        consecutiveMissedDays:
          type: integer
          example: 2
          description: Consecutive missed days
        progressPercentage:
          type: number
          format: float
          example: 25.5
          description: Overall progress percentage
        lastUpdateDate:
          type: string
          format: date-time
          nullable: true
          example: '2025-01-17T10:30:00.000Z'
          description: Date of last progress update
        riskFactors:
          type: array
          items:
            type: string
          example: ['Không cập nhật tiến độ', 'Vượt quá 3 ngày liên tiếp']
          description: List of risk factors identified
      required:
        - plan
        - user
        - riskLevel
        - daysSinceLastUpdate
        - missedDays
        - consecutiveMissedDays
        - progressPercentage
        - riskFactors
    SystemStats:
      type: object
      properties:
        totalPlans:
          type: integer
          example: 150
          description: Total number of quit plans in system
        ongoingPlans:
          type: integer
          example: 45
          description: Number of ongoing plans
        completedPlans:
          type: integer
          example: 80
          description: Number of completed plans
        failedPlans:
          type: integer
          example: 25
          description: Number of failed plans
        plansAtRisk:
          type: object
          properties:
            low:
              type: integer
              example: 10
            medium:
              type: integer
              example: 8
            high:
              type: integer
              example: 5
            critical:
              type: integer
              example: 2
          description: Number of plans at each risk level
        averageCompletionRate:
          type: number
          format: float
          example: 76.2
          description: Average completion rate percentage
        totalUsers:
          type: integer
          example: 300
          description: Total number of users
        activeUsers:
          type: integer
          example: 120
          description: Number of users with ongoing plans
        dailyProgressUpdates:
          type: integer
          example: 35
          description: Number of progress updates today
        recentFailures:
          type: integer
          example: 3
          description: Number of plans that failed in last 24 hours
        systemHealth:
          type: string
          enum: ['excellent', 'good', 'warning', 'critical']
          example: 'good'
          description: Overall system health status
        lastCheckedAt:
          type: string
          format: date-time
          example: '2025-01-21T10:30:00.000Z'
          description: Last time statistics were calculated
      required:
        - totalPlans
        - ongoingPlans
        - completedPlans
        - failedPlans
        - plansAtRisk
        - averageCompletionRate
        - totalUsers
        - activeUsers
        - dailyProgressUpdates
        - recentFailures
        - systemHealth
                 - lastCheckedAt
    UserPlanHistoryResponse:
      type: object
      properties:
        planHistory:
          type: array
          items:
            $ref: '#/components/schemas/PlanHistoryItem'
          description: List of user's quit plans with completion details
        summary:
          $ref: '#/components/schemas/PlanHistorySummary'
          description: Summary statistics of user's plan history
      required:
        - planHistory
        - summary
    PlanHistoryItem:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/QuitPlan'
          description: The quit plan details
        completedStages:
          type: integer
          example: 3
          description: Number of completed stages
        totalStages:
          type: integer
          example: 5
          description: Total number of stages in the plan
        completionPercentage:
          type: integer
          example: 60
          description: Completion percentage (0-100)
        badgeCount:
          type: integer
          example: 2
          description: Number of badges earned for this plan
        badges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
          description: List of badges earned for this plan
        duration:
          type: integer
          nullable: true
          example: 30
          description: Duration of the plan in days
      required:
        - plan
        - completedStages
        - totalStages
        - completionPercentage
        - badgeCount
        - badges
    PlanHistorySummary:
      type: object
      properties:
        totalPlans:
          type: integer
          example: 5
          description: Total number of plans user has participated in
        completedPlans:
          type: integer
          example: 2
          description: Number of completed plans
        ongoingPlans:
          type: integer
          example: 1
          description: Number of currently ongoing plans
        failedPlans:
          type: integer
          example: 2
          description: Number of failed plans
        templatePlans:
          type: integer
          example: 0
          description: Number of template plans (should be 0 for users)
        totalBadges:
          type: integer
          example: 8
          description: Total number of badges earned across all plans
      required:
        - totalPlans
        - completedPlans
        - ongoingPlans
        - failedPlans
        - templatePlans
        - totalBadges
    PlanCompletionResponse:
      type: object
      properties:
        plan:
          $ref: '#/components/schemas/QuitPlan'
          description: The quit plan details
        stages:
          type: array
          items:
            $ref: '#/components/schemas/QuitPlanStage'
          description: List of all stages in the plan
        completedStages:
          type: integer
          example: 3
          description: Number of completed stages
        totalStages:
          type: integer
          example: 5
          description: Total number of stages in the plan
        completionPercentage:
          type: integer
          example: 60
          description: Completion percentage (0-100)
        badges:
          type: array
          items:
            $ref: '#/components/schemas/Badge'
          description: List of badges earned for this plan
        isCompleted:
          type: boolean
          example: false
          description: Whether the entire plan has been completed
      required:
        - plan
        - stages
        - completedStages
        - totalStages
        - completionPercentage
        - badges
        - isCompleted
    UserBadgeResponse:
      type: object
      properties:
        _id:
          type: string
          example: 'userbadge-12345'
        badgeId:
          type: string
          example: 'badge-12345'
        name:
          type: string
          example: 'Plan Completed'
        description:
          type: string
          example: 'Hoàn thành kế hoạch cai thuốc: Kế hoạch 30 ngày'
        icon_url:
          type: string
          nullable: true
          example: '/badges/plan-completed.png'
        awardedAt:
          type: string
          format: date-time
          example: '2025-01-21T10:30:00.000Z'
        quitPlanId:
          type: string
          example: 'plan-12345'
      required:
        - _id
        - badgeId
        - name
        - awardedAt
    BadgeCreateForPlanRequest:
      type: object
      description: |
        Coach creates a badge for a template plan. When a user completes a plan from this template, 
        they will automatically receive this badge.
      properties:
        quitPlanId:
          type: string
          example: 'template-plan-12345'
          description: ID của plan template (status = "template") mà coach muốn tạo badge
        name:
          type: string
          example: 'Plan Completion Master'
          description: Tên của huy hiệu
        description:
          type: string
          example: 'Hoàn thành xuất sắc kế hoạch cai thuốc 30 ngày'
          description: Mô tả thành tích để nhận huy hiệu
        icon_url:
          type: string
          nullable: true
          example: '/badges/plan-completion-master.png'
          description: URL đến icon của huy hiệu
      required:
        - quitPlanId
        - name
        - description
    AwardBadgeRequest:
      type: object
      properties:
        userId:
          type: string
          example: '54321'
          description: ID of the user to award the badge to
        badgeId:
          type: string
          example: 'badge-12345'
          description: ID of the badge to award
      required:
        - userId
        - badgeId

    UserBadgeAwardResponse:
      type: object
      properties:
        _id:
          type: string
          example: 'userbadge-12345'
        userId:
          type: object
          properties:
            _id:
              type: string
              example: '54321'
            userName:
              type: string
              example: 'john_doe'
            email:
              type: string
              format: email
              example: 'john@example.com'
        badgeId:
          $ref: '#/components/schemas/Badge'
        awardedAt:
          type: string
          format: date-time
          example: '2025-01-21T10:30:00.000Z'
      required:
        - _id
        - userId
        - badgeId
        - awardedAt