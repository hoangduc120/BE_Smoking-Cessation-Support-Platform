openapi: 3.0.0
servers:
  - description: QuitSmoke API
    url: http://localhost:5000/api
info:
  version: "1.0.0"
  title: QuitSmoke API
  description: API for managing user authentication, blogs, profiles, surveys, memberships, payments, chat, and quit plans, developed by Hoàng Đức.
  contact:
    name: Hoàng Đức
    email: hoangduc@example.com
security:
  - BearerAuth: []
paths:
  /auth/login:
    post:
      tags:
        - Auth
      summary: User login
      description: Authenticates a user and returns access and refresh tokens.
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/register:
    post:
      tags:
        - Auth
      summary: User registration
      description: Registers a new user in the system.
      operationId: register
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
        required: true
      responses:
        '200':
          description: Successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid registration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/logout:
    post:
      tags:
        - Auth
      summary: User logout
      description: Logs out the user by invalidating the refresh token.
      operationId: logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/refresh-token:
    post:
      tags:
        - Auth
      summary: Refresh access token
      description: Generates a new access token using a valid refresh token.
      operationId: refreshToken
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
        required: true
      responses:
        '200':
          description: Successfully refreshed token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/google:
    get:
      tags:
        - Auth
      summary: Initiate Google OAuth login
      description: Redirects to Google OAuth for authentication.
      operationId: googleAuth
      responses:
        '302':
          description: Redirect to Google OAuth
  /auth/google/callback:
    get:
      tags:
        - Auth
      summary: Google OAuth callback
      description: Handles Google OAuth callback and returns tokens.
      operationId: googleCallback
      responses:
        '302':
          description: Redirect with access token
        '401':
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Initiates the password reset process by sending a reset link.
      operationId: forgotPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
        required: true
      responses:
        '200':
          description: Password reset link sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /auth/reset-password:
    put:
      tags:
        - Auth
      summary: Reset user password
      description: Resets the user password using a valid reset token.
      operationId: resetPassword
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordRequest'
        required: true
      responses:
        '200':
          description: Password reset successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Invalid reset token or password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs:
    get:
      tags:
        - Blog
      summary: Get all blogs
      description: Retrieves a list of all blogs with optional pagination.
      operationId: getAllBlogs
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of blogs per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of blogs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Blog
      summary: Create a new blog
      description: Creates a new blog post (requires user, coach, or admin role).
      operationId: createBlog
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogCreateRequest'
        required: true
      responses:
        '200':
          description: Blog created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/tags:
    get:
      tags:
        - Blog
      summary: Get all tags
      description: Retrieves a list of all tags used in blogs.
      operationId: getAllTags
      responses:
        '200':
          description: List of tags
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: 'motivation'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/tag/{tagId}:
    get:
      tags:
        - Blog
      summary: Get blogs by tag
      description: Retrieves all blogs associated with a specific tag.
      operationId: getBlogsByTag
      parameters:
        - name: tagId
          in: path
          required: true
          schema:
            type: string
            example: 'motivation'
      responses:
        '200':
          description: List of blogs for the tag
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'
        '404':
          description: Tag not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/user/{userId}:
    get:
      tags:
        - Blog
      summary: Get blogs by user ID
      description: Retrieves all blogs created by a specific user.
      operationId: getBlogsByUserId
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of blogs per page
          schema:
            type: integer
            example: 10
        - name: sortBy
          in: query
          description: Field to sort by
          schema:
            type: string
            example: 'createdAt'
        - name: sortOrder
          in: query
          description: Sort order (asc or desc)
          schema:
            type: string
            enum: ['asc', 'desc']
            example: 'desc'
      responses:
        '200':
          description: List of blogs by user
          content:
            application/json:
              schema:
                type: object
                properties:
                  blogs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Blog"
                  total:
                    type: integer
                    example: 20
                  currentPage:
                    type: integer
                    example: 1
                  totalPages:
                    type: integer
                    example: 2
        '404':
          description: User not found or invalid user ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/{slug}:
    get:
      tags:
        - Blog
      summary: Get blog by slug
      description: Retrieves a blog post by its slug.
      operationId: getBlogBySlug
      parameters:
        - name: slug
          in: path
          required: true
          schema:
            type: string
            example: 'how-to-quit-smoking'
      responses:
        '200':
          description: Blog details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/{id}:
    put:
      tags:
        - Blog
      summary: Update a blog
      description: Updates an existing blog post (requires user, coach, or admin role).
      operationId: updateBlog
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogUpdateRequest'
        required: true
      responses:
        '200':
          description: Blog updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Blog
      summary: Delete a blog
      description: Deletes a blog post (requires user, coach, or admin role).
      operationId: deleteBlog
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Blog deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/{bid}/like:
    post:
      tags:
        - Blog
      summary: Like a blog
      description: Likes a blog post (requires user, coach, or admin role).
      operationId: likeBlog
      security:
        - BearerAuth: []
      parameters:
        - name: bid
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Blog liked successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /blogs/{id}/comment:
    post:
      tags:
        - Blog
      summary: Add a comment to a blog
      description: Adds a comment to a blog post (requires user, coach, or admin role).
      operationId: addComment
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
        required: true
      responses:
        '200':
          description: Comment added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Blog not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/all:
    get:
      tags:
        - User
      summary: Get all users
      description: Retrieves a list of all users (requires admin role).
      operationId: getAllUsers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/search:
    get:
      tags:
        - User
      summary: Search users
      description: Searches for users based on query parameters.
      operationId: searchUsers
      parameters:
        - name: query
          in: query
          description: Search query (e.g., username or email)
          schema:
            type: string
            example: 'john'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of matching users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/profile/me:
    get:
      tags:
        - User
      summary: Get current user profile
      description: Retrieves the profile of the authenticated user.
      operationId: getProfileMe
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/profile:
    get:
      tags:
        - User
      summary: Get user profile
      description: Retrieves the profile of a specific user by query parameter.
      operationId: getProfile
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          description: ID of the user to retrieve
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - User
      summary: Update user profile
      description: Updates the profile of the authenticated user.
      operationId: updateProfile
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateRequest'
        required: true
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}:
    get:
      tags:
        - User
      summary: Get user by ID
      description: Retrieves a user by their ID.
      operationId: getUserById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/{id}/stats:
    get:
      tags:
        - User
      summary: Get user statistics
      description: Retrieves statistics for a specific user.
      operationId: getUserStats
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserStats'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/change-password:
    put:
      tags:
        - User
      summary: Change user password
      description: Changes the password of the authenticated user.
      operationId: changePassword
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangePasswordRequest'
        required: true
      responses:
        '200':
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/update-avatar:
    put:
      tags:
        - User
      summary: Update user avatar
      description: Updates the avatar of the authenticated user using Cloudinary.
      operationId: updateAvatar
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AvatarUploadRequest'
        required: true
      responses:
        '200':
          description: Avatar updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid file
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/follow/{id}:
    put:
      tags:
        - User
      summary: Follow a user
      description: Follows a user by their ID.
      operationId: followUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User followed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/unfollow/{id}:
    put:
      tags:
        - User
      summary: Unfollow a user
      description: Unfollows a user by their ID.
      operationId: unfollowUser
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: User unfollowed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/followers/{id}:
    get:
      tags:
        - User
      summary: Get followers of a user
      description: Retrieves the list of followers for a specific user.
      operationId: getFollowers
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of followers per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of followers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/following/{id}:
    get:
      tags:
        - User
      summary: Get users followed by a user
      description: Retrieves the list of users followed by a specific user.
      operationId: getFollowing
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of followed users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of followed users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/my-followers:
    get:
      tags:
        - User
      summary: Get my followers
      description: Retrieves the list of followers of the authenticated user.
      operationId: getMyFollowers
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of followers per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of followers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /users/my-following:
    get:
      tags:
        - User
      summary: Get users I follow
      description: Retrieves the list of users followed by the authenticated user.
      operationId: getMyFollowing
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of followed users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of followed users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys:
    get:
      tags:
        - Survey
      summary: Get all surveys
      description: Retrieves a list of all surveys (requires admin role).
      operationId: getAllSurveys
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of surveys per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of surveys
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Survey
      summary: Create a new survey
      description: Creates a new survey (requires user role).
      operationId: createSurvey
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyCreateRequest'
        required: true
      responses:
        '200':
          description: Survey created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys/me/surveys:
    get:
      tags:
        - Survey
      summary: Get surveys by authenticated user
      description: Retrieves all surveys created by the authenticated user (requires user role).
      operationId: getSurveysByUserIdMe
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of surveys per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of surveys by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys/user/{userId}:
    get:
      tags:
        - Survey
      summary: Get surveys by user ID
      description: Retrieves all surveys created by a specific user (requires authentication).
      operationId: getSurveysByUserId
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of surveys per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of surveys by user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /surveys/{surveyId}:
    get:
      tags:
        - Survey
      summary: Get survey by ID
      description: Retrieves a survey by its ID (requires user role).
      operationId: getSurveyById
      security:
        - BearerAuth: []
      parameters:
        - name: surveyId
          in: path
          required: true
          schema:
            type: string
            example: '67890'
      responses:
        '200':
          description: Survey details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - Survey
      summary: Update a survey
      description: Updates an existing survey (requires user role).
      operationId: updateSurvey
      security:
        - BearerAuth: []
      parameters:
        - name: surveyId
          in: path
          required: true
          schema:
            type: string
            example: '67890'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SurveyUpdateRequest'
        required: true
      responses:
        '200':
          description: Survey updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Survey'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - Survey
      summary: Delete a survey
      description: Deletes a survey (requires user or admin role).
      operationId: deleteSurvey
      security:
        - BearerAuth: []
      parameters:
        - name: surveyId
          in: path
          required: true
          schema:
            type: string
            example: '67890'
      responses:
        '200':
          description: Survey deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Survey not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /membership-plans:
    get:
      tags:
        - MembershipPlan
      summary: Get all membership plans
      description: Retrieves a list of all membership plans.
      operationId: getAllPackages
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of plans per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of membership plans
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MembershipPlan'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - MembershipPlan
      summary: Create a new membership plan
      description: Creates a new membership plan (requires admin role).
      operationId: createPackage
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPlanCreateRequest'
        required: true
      responses:
        '200':
          description: Membership plan created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipPlan'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /membership-plans/{id}:
    get:
      tags:
        - MembershipPlan
      summary: Get membership plan by ID
      description: Retrieves a membership plan by its ID.
      operationId: getPackageById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'plan-001'
      responses:
        '200':
          description: Membership plan details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipPlan'
        '404':
          description: Membership plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - MembershipPlan
      summary: Update a membership plan
      description: Updates an existing membership plan (requires admin role).
      operationId: updatePackage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'plan-001'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MembershipPlanUpdateRequest'
        required: true
      responses:
        '200':
          description: Membership plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MembershipPlan'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - MembershipPlan
      summary: Delete a membership plan
      description: Deletes a membership plan (requires admin role).
      operationId: deletePackage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            example: 'plan-001'
      responses:
        '200':
          description: Membership plan deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-memberships/register:
    post:
      tags:
        - UserMembership
      summary: Register for a membership plan
      description: Registers the authenticated user for a membership plan.
      operationId: registerPackage
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserMembershipRegisterRequest'
        required: true
      responses:
        '200':
          description: Successfully registered for membership plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMembership'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-memberships/active/{userId}:
    get:
      tags:
        - UserMembership
      summary: Get active membership
      description: Retrieves the active membership for a specific user.
      operationId: getActiveMembership
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Active membership details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserMembership'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: No active membership found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-memberships/access/{userId}/{feature}:
    get:
      tags:
        - UserMembership
      summary: Check feature access
      description: Checks if a user has access to a specific feature based on their membership.
      operationId: checkFeatureAccess
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: feature
          in: path
          required: true
          schema:
            type: string
            example: 'personalized-coaching'
      responses:
        '200':
          description: Feature access status
          content:
            application/json:
              schema:
                type: object
                properties:
                  hasAccess:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User or feature not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-memberships/pending/{userId}:
    get:
      tags:
        - UserMembership
      summary: Get pending memberships
      description: Retrieves all pending memberships for a specific user.
      operationId: getPendingMemberships
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: List of pending memberships
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserMembership'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /user-memberships/history/{userId}:
    get:
      tags:
        - UserMembership
      summary: Get membership history
      description: Retrieves the membership history for a specific user.
      operationId: getMembershipHistory
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of memberships per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Membership history
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserMembership'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /payments/create-payment:
    post:
      tags:
        - Payment
      summary: Create payment URL
      description: Generates a payment URL for a user membership (requires authentication).
      operationId: createPaymentUrl
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCreateRequest'
        required: true
      responses:
        '200':
          description: Payment URL created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  paymentUrl:
                    type: string
                    format: uri
                    example: 'https://vnpay.vn/payment/12345'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /payments/vnpay-return:
    get:
      tags:
        - Payment
      summary: Handle payment callback
      description: Handles the callback from VNPay after payment processing.
      operationId: paymentCallback
      parameters:
        - name: vnp_TxnRef
          in: query
          required: true
          schema:
            type: string
            example: 'txn-12345'
        - name: vnp_ResponseCode
          in: query
          required: true
          schema:
            type: string
            example: '00'
      responses:
        '200':
          description: Payment processed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '400':
          description: Payment failed or invalid callback
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /payments/check-status/{userMembershipId}:
    get:
      tags:
        - Payment
      summary: Check payment status
      description: Checks the payment status for a user membership (requires authentication).
      operationId: checkPaymentStatus
      security:
        - BearerAuth: []
      parameters:
        - name: userMembershipId
          in: path
          required: true
          schema:
            type: string
            example: 'mem-12345'
      responses:
        '200':
          description: Payment status retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - pending
                      - completed
                      - failed
                    example: 'completed'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Membership not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/users:
    get:
      tags:
        - ChatMessage
      summary: Get users for sidebar
      description: Retrieves a list of users for the chat sidebar (requires authentication).
      operationId: getUsersForSidebar
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of users per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/conversations:
    get:
      tags:
        - ChatMessage
      summary: Get conversations
      description: Retrieves all conversations for the authenticated user.
      operationId: getConversations
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of conversations per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of conversations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Conversation'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/unread-count:
    get:
      tags:
        - ChatMessage
      summary: Get unread message count
      description: Retrieves the count of unread messages for the authenticated user.
      operationId: getUnreadCount
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Unread message count
          content:
            application/json:
              schema:
                type: object
                properties:
                  unreadCount:
                    type: integer
                    example: 5
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/messages/{receiverId}:
    get:
      tags:
        - ChatMessage
      summary: Get messages with a user
      description: Retrieves all messages between the authenticated user and a specific receiver.
      operationId: getMessages
      security:
        - BearerAuth: []
      parameters:
        - name: receiverId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: Number of messages per page
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: List of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - ChatMessage
      summary: Send a message
      description: Sends a message to a specific user.
      operationId: sendMessage
      security:
        - BearerAuth: []
      parameters:
        - name: receiverId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatMessageRequest'
        required: true
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChatMessage'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/mark-read/{senderId}:
    put:
      tags:
        - ChatMessage
      summary: Mark messages as read
      description: Marks messages from a specific sender as read for the authenticated user.
      operationId: markAsRead
      security:
        - BearerAuth: []
      parameters:
        - name: senderId
          in: path
          required: true
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Messages marked as read
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Sender not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /chat/messages/{messageId}:
    delete:
      tags:
        - ChatMessage
      summary: Delete a message
      description: Deletes a specific message (requires authentication).
      operationId: deleteMessage
      security:
        - BearerAuth: []
      parameters:
        - name: messageId
          in: path
          required: true
          schema:
            type: string
            example: 'msg-12345'
      responses:
        '200':
          description: Message deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Message not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans:
    get:
      tags:
        - QuitPlan
      summary: Get quit plans
      description: Retrieves a list of quit plans filtered by user ID, coach ID, or status with pagination.
      operationId: getQuitPlans
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          description: Filter by user ID
          schema:
            type: string
            example: '12345'
        - name: coachId
          in: query
          description: Filter by coach ID
          schema:
            type: string
            example: '67890'
        - name: status
          in: query
          description: Filter by quit plan status
          schema:
            type: string
            enum:
              - template
              - pending
              - ongoing
              - completed
              - failed
            example: 'ongoing'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of quit plans per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of quit plans with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  quitPlans:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitPlan'
                  total:
                    type: integer
                    example: 50
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid query parameters (e.g., invalid userId, coachId, or status)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - QuitPlan
      summary: Create a new quit plan template
      description: Creates a new quit plan template (requires coach role).
      operationId: createQuitPlan
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuitPlanCreateRequest'
        required: true
      responses:
        '201':
          description: Quit plan template created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlan'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not a coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data (e.g., missing title or reason)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{id}:
    get:
      tags:
        - QuitPlan
      summary: Get quit plan by ID
      description: Retrieves a quit plan and its associated badges by ID.
      operationId: getQuitPlanById
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Quit plan and associated badges
          content:
            application/json:
              schema:
                type: object
                properties:
                  quitPlan:
                    $ref: '#/components/schemas/QuitPlan'
                  badges:
                    type: array
                    items:
                      $ref: '#/components/schemas/Badge'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - QuitPlan
      summary: Update a quit plan
      description: Updates an existing quit plan (requires coach or user ownership).
      operationId: updateQuitPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuitPlanUpdateRequest'
        required: true
      responses:
        '200':
          description: Quit plan updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlan'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not own the plan or is not the coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - QuitPlan
      summary: Delete a quit plan
      description: Deletes a quit plan and its associated stages and badges (requires coach ownership).
      operationId: deleteQuitPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Quit plan deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not the coach of the plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{quitPlanId}/stages:
    get:
      tags:
        - QuitPlanStage
      summary: Get quit plan stages
      description: Retrieves all stages for a specific quit plan with pagination.
      operationId: getQuitPlanStages
      security:
        - BearerAuth: []
      parameters:
        - name: quitPlanId
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of stages per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of quit plan stages with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  stages:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitPlanStage'
                  total:
                    type: integer
                    example: 20
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid query parameters (e.g., invalid quitPlanId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - QuitPlanStage
      summary: Create a new quit plan stage
      description: Creates a new stage for a quit plan (requires coach role).
      operationId: createQuitPlanStage
      security:
        - BearerAuth: []
      parameters:
        - name: quitPlanId
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuitPlanStageCreateRequest'
        required: true
      responses:
        '201':
          description: Quit plan stage created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlanStage'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not a coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data (e.g., missing stage_name or order_index)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplan-stages/{id}:
    put:
      tags:
        - QuitPlanStage
      summary: Update a quit plan stage
      description: Updates an existing quit plan stage (requires coach role).
      operationId: updateQuitPlanStage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan stage
          schema:
            type: string
            example: 'stage-12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuitPlanStageUpdateRequest'
        required: true
      responses:
        '200':
          description: Quit plan stage updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlanStage'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not a coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan stage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - QuitPlanStage
      summary: Delete a quit plan stage
      description: Deletes a quit plan stage (requires coach ownership).
      operationId: deleteQuitPlanStage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan stage
          schema:
            type: string
            example: 'stage-12345'
      responses:
        '200':
          description: Quit plan stage deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not the coach of the plan
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan stage not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{quitPlanId}/badges:
    get:
      tags:
        - Badge
      summary: Get quit plan badges
      description: Retrieves all badges for a specific quit plan with pagination.
      operationId: getQuitPlanBadges
      security:
        - BearerAuth: []
      parameters:
        - name: quitPlanId
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of badges per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of badges with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  badges:
                    type: array
                    items:
                      $ref: '#/components/schemas/Badge'
                  total:
                    type: integer
                    example: 20
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - Badge
      summary: Award a badge to a quit plan
      description: Awards a badge to a quit plan user (requires coach role).
      operationId: awardBadge
      security:
        - BearerAuth: []
      parameters:
        - name: quitPlanId
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BadgeCreateRequest'
        required: true
      responses:
        '201':
          description: Badge awarded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Badge'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User is not a coach
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data (e.g., missing name or description)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/select:
    post:
      tags:
        - QuitPlan
      summary: Select a template quit plan
      description: Allows a user to select and activate a template quit plan created by a coach.
      operationId: selectQuitPlan
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - quitPlanId
              properties:
                quitPlanId:
                  type: string
                  example: 'template-plan-123'
                  description: ID of the template plan to select
        required: true
      responses:
        '201':
          description: Quit plan selected and created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlan'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request (e.g., user already has an ongoing plan, invalid template, or selecting own template)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/current:
    get:
      tags:
        - QuitPlan
      summary: Get current quit plan
      description: Retrieves the current ongoing quit plan for the authenticated user, including stages and progress.
      operationId: getUserCurrentPlan
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current quit plan with stages and progress, or null if no ongoing plan exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  plan:
                    $ref: '#/components/schemas/QuitPlan'
                    nullable: true
                  stages:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitPlanStage'
                  progress:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitProgress'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplan-stages/{id}/complete:
    put:
      tags:
        - QuitPlanStage
      summary: Complete a quit plan stage
      description: Marks a quit plan stage as completed for the user and awards a badge.
      operationId: completeStage
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan stage
          schema:
            type: string
            example: 'stage-12345'
      responses:
        '200':
          description: Stage completed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Stage completed successfully'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Stage or quit plan not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request (e.g., stage not part of user's ongoing plan)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/{id}/fail:
    put:
      tags:
        - QuitPlan
      summary: Mark quit plan as failed
      description: Allows a user to mark their ongoing quit plan as failed.
      operationId: failQuitPlan
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit plan
          schema:
            type: string
            example: '12345'
      responses:
        '200':
          description: Quit plan marked as failed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitPlan'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit plan not found or not ongoing
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /plans/quitplans/template:
    get:
      tags:
        - QuitPlan
      summary: Get template quit plans
      description: Retrieves a list of template quit plans filtered by coach ID with pagination.
      operationId: getTemplatePlans
      security:
        - BearerAuth: []
      parameters:
        - name: coachId
          in: query
          description: Filter by coach ID
          required: true
          schema:
            type: string
            example: '67890'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of template plans per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of template quit plans with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  quitPlans:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitPlan'
                  total:
                    type: integer
                    example: 20
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid query parameters (e.g., missing or invalid coachId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /quitprogress:
    post:
      tags:
        - QuitProgress
      summary: Create a new quit progress
      description: Creates a new quit progress record for the authenticated user (requires user role).
      operationId: createQuitProgress
      security:
        - BearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuitProgressCreateRequest"
        required: true
      responses:
        '200':
          description: Quit progress created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitProgress'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid request data (e.g., missing required fields or invalid stageId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    get:
      tags:
        - QuitProgress
      summary: Get quit progress records
      description: Retrieves a list of quit progress records filtered by userId, stageId, or date with pagination (requires user role).
      operationId: getQuitProgresses
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: query
          description: Filter by user ID
          schema:
            type: string
            example: '54321'
        - name: stageId
          in: query
          description: Filter by stage ID
          schema:
            type: string
            example: 'stage-12345'
        - name: date
          in: query
          description: Filter by date (format YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: '2025-06-02'
        - name: page
          in: query
          description: Page number for pagination
          schema:
            type: integer
            minimum: 1
            example: 1
        - name: limit
          in: query
          description: Number of quit progress records per page
          schema:
            type: integer
            minimum: 1
            example: 10
      responses:
        '200':
          description: List of quit progress records with pagination metadata
          content:
            application/json:
              schema:
                type: object
                properties:
                  progresses:
                    type: array
                    items:
                      $ref: '#/components/schemas/QuitProgress'
                  total:
                    type: integer
                    example: 20
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '400':
          description: Invalid query parameters (e.g., invalid userId or stageId)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /quitprogress/{id}:
    get:
      tags:
        - QuitProgress
      summary: Get quit progress by ID
      description: Retrieves a quit progress record by its ID (requires user role).
      operationId: getQuitProgress
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit progress record
          schema:
            type: string
            example: 'progress-12345'
      responses:
        '200':
          description: Quit progress details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitProgress'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit progress not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    put:
      tags:
        - QuitProgress
      summary: Update a quit progress
      description: Updates an existing quit progress record (requires user role and ownership).
      operationId: updateQuitProgress
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit progress record
          schema:
            type: string
            example: 'progress-12345'
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/QuitProgressUpdateRequest"
        required: true
      responses:
        '200':
          description: Quit progress updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuitProgress'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not own the progress record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit progress not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
        - QuitProgress
      summary: Delete a quit progress
      description: Deletes a quit progress record (requires user or admin role).
      operationId: deleteQuitProgress
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the quit progress record
          schema:
            type: string
            example: 'progress-12345'
      responses:
        '200':
          description: Quit progress deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
        '401':
          description: Unauthorized - Invalid or missing authentication token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '403':
          description: Forbidden - User does not have permission
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Quit progress not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
        password:
          type: string
          format: password
          example: 'password123'
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'Login successful'
        data:
          type: object
          properties:
            user:
              type: object
              properties:
                id:
                  type: string
                  example: '12345'
                email:
                  type: string
                  example: 'user@example.com'
                role:
                  type: string
                  enum: ['admin', 'user', 'coach']
                  example: 'user'
            token:
              type: string
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'
      required:
        - status
        - message
        - data
    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: 'user@example.com'
        password:
          type: string
          format: password
          example: 'password123'
        confirmPassword:
          type: string
          format: password
          example: 'password123'
        userName:
          type: string
          example: 'john_doe'
      required:
        - email
        - password
        - confirmPassword
        - userName
    User:
      type: object
      properties:
        _id:
          type: string
          example: '12345'
        userName:
          type: string
          example: 'john_doe'
        email:
          type: string
          format: email
          example: 'user@example.com'
        role:
          type: string
          enum: ['admin', 'user', 'coach']
          example: 'user'
        gender:
          type: string
          enum: ['male', 'female', 'other']
          example: 'male'
        bio:
          type: string
          nullable: true
          example: 'Passionate about health and wellness'
        dateOfBirth:
          type: string
          format: date
          example: '1990-01-01'
        profilePicture:
          type: string
          format: uri
          example: 'https://example.com/profile.jpg'
        phone:
          type: string
          nullable: true
          example: '+84901234567'
        address:
          type: string
          nullable: true
          example: '123 Main St, City'
        isActive:
          type: boolean
          example: true
        smokingFreeDays:
          type: integer
          example: 30
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - userName
        - email
        - role
    MembershipPlan:
      type: object
      properties:
        _id:
          type: string
          example: 'plan-001'
        name:
          type: string
          example: 'Premium Plan'
        description:
          type: string
          example: 'Access to premium features'
        price:
          type: number
          example: 29.99
        duration:
          type: integer
          example: 30
        features:
          type: array
          items:
            type: string
          example: ['feature1', 'feature2']
        isActive:
          type: boolean
          example: true
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - name
        - price
        - duration
    MembershipPlanCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Premium Plan'
        description:
          type: string
          example: 'Access to premium features'
        price:
          type: number
          example: 29.99
        duration:
          type: integer
          example: 30
        features:
          type: array
          items:
            type: string
          example: ['feature1', 'feature2']
      required:
        - name
        - price
        - duration
    MembershipPlanUpdateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Updated Premium Plan'
        description:
          type: string
          example: 'Updated description'
        price:
          type: number
          example: 39.99
        duration:
          type: integer
          example: 30
        features:
          type: array
          items:
            type: string
          example: ['feature1', 'feature2', 'feature3']
    UserMembership:
      type: object
      properties:
        _id:
          type: string
          example: 'membership-001'
        userId:
          type: string
          example: '12345'
        memberShipPlanId:
          type: string
          example: 'plan-001'
        startDate:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        endDate:
          type: string
          format: date-time
          example: '2025-01-31T23:59:59.999Z'
        paymentStatus:
          type: string
          enum: ['pending', 'paid', 'failed']
          example: 'paid'
        price:
          type: number
          example: 29.99
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - userId
        - memberShipPlanId
        - startDate
        - endDate
        - paymentStatus
        - price
    UserMembershipRegisterRequest:
      type: object
      properties:
        memberShipPlanId:
          type: string
          example: 'plan-001'
      required:
        - memberShipPlanId
    ChatMessage:
      type: object
      properties:
        _id:
          type: string
          example: 'msg-12345'
        senderId:
          type: string
          example: '12345'
        receiverId:
          type: string
          example: '67890'
        message:
          type: string
          example: 'Hello, how are you?'
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - senderId
        - receiverId
        - message
    ChatMessageRequest:
      type: object
      properties:
        message:
          type: string
          example: 'Hello, how are you?'
      required:
        - message
    Conversation:
      type: object
      properties:
        _id:
          type: string
          example: 'conv-12345'
        participants:
          type: array
          items:
            type: string
          example: ['12345', '67890']
        lastMessage:
          $ref: '#/components/schemas/ChatMessage'
        unreadCount:
          type: integer
          example: 3
        createdAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-01-01T00:00:00.000Z'
      required:
        - _id
        - participants
    QuitPlan:
      type: object
      properties:
        _id:
          type: string
          example: '12345'
        coachId:
          type: object
          properties:
            _id:
              type: string
              example: '67890'
            name:
              type: string
              example: 'Coach John'
            email:
              type: string
              example: 'john@example.com'
        userId:
          type: object
          nullable: true
          properties:
            _id:
              type: string
              example: '54321'
            name:
              type: string
              example: 'Jane Doe'
            email:
              type: string
              example: 'jane@example.com'
        title:
          type: string
          example: 'Smoking Cessation Plan'
        reason:
          type: string
          example: 'Improve health and save money'
        startDate:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        endDate:
          type: string
          format: date-time
          example: '2025-07-02T13:46:00.000Z'
        status:
          type: string
          enum: ['template', 'pending', 'ongoing', 'completed', 'failed']
          example: 'template'
        createdAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
      required:
        - coachId
        - title
        - reason
        - status
    QuitPlanCreateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Smoking Cessation Plan'
        reason:
          type: string
          example: 'Improve health and save money'
        startDate:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        endDate:
          type: string
          format: date-time
          example: '2025-07-02T13:46:00.000Z'
      required:
        - title
        - reason
    QuitPlanUpdateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Updated Smoking Cessation Plan'
        reason:
          type: string
          example: 'Updated reason'
        startDate:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        endDate:
          type: string
          format: date-time
          example: '2025-07-02T13:46:00.000Z'
        status:
          type: string
          enum: ['template', 'pending', 'ongoing', 'completed', 'failed']
          example: 'ongoing'
    QuitPlanStage:
      type: object
      properties:
        _id:
          type: string
          example: 'stage-12345'
        quitPlanId:
          type: string
          example: '12345'
        stage_name:
          type: string
          example: 'Week 1: Reduce Usage'
        description:
          type: string
          example: 'Reduce cigarette usage by 50%'
        order_index:
          type: integer
          example: 1
        start_date:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        end_date:
          type: string
          format: date-time
          example: '2025-06-09T13:46:00.000Z'
        completed:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
      required:
        - quitPlanId
        - stage_name
        - order_index
        - start_date
        - end_date
    QuitPlanStageCreateRequest:
      type: object
      properties:
        quitPlanId:
          type: string
          example: '12345'
        stage_name:
          type: string
          example: 'Week 1: Reduce Usage'
        description:
          type: string
          example: 'Reduce cigarette usage by 50%'
        order_index:
          type: integer
          example: 1
        start_date:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        end_date:
          type: string
          format: date-time
          example: '2025-06-09T13:46:00.000Z'
      required:
        - quitPlanId
        - stage_name
        - order_index
        - start_date
        - end_date
    QuitPlanStageUpdateRequest:
      type: object
      properties:
        stage_name:
          type: string
          example: 'Updated Week 1'
        description:
          type: string
          example: 'Updated description'
        order_index:
          type: integer
          example: 1
        start_date:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        end_date:
          type: string
          format: date-time
          example: '2025-06-09T13:46:00.000Z'
        completed:
          type: boolean
          example: true
    Badge:
      type: object
      properties:
        _id:
          type: string
          example: 'badge-12345'
        quitPlanId:
          type: string
          example: '12345'
        userId:
          type: object
          properties:
            _id:
              type: string
              example: '54321'
            name:
              type: string
              example: 'Jane Doe'
            email:
              type: string
              example: 'jane@example.com'
        name:
          type: string
          example: 'Stage Completed'
        description:
          type: string
          example: 'Completed stage: Week 1'
        awardedAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
      required:
        - quitPlanId
        - userId
        - name
        - awardedAt
    BadgeCreateRequest:
      type: object
      properties:
        name:
          type: string
          example: 'Stage Completed'
        description:
          type: string
          example: 'Completed stage: Week 1'
      required:
        - name
        - description
    QuitProgress:
      type: object
      properties:
        _id:
          type: string
          example: 'progress-12345'
        userId:
          type: string
          example: '54321'
        stageId:
          type: string
          example: 'stage-12345'
        date:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        cigarettesSmoked:
          type: integer
          minimum: 0
          example: 5
        healthStatus:
          type: string
          example: 'Feeling better'
        notes:
          type: string
          example: 'Had some cravings but managed to resist'
        createdAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
        updatedAt:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
      required:
        - userId
        - stageId
        - date
        - cigarettesSmoked
        - healthStatus
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          example: 'success'
        message:
          type: string
          example: 'Operation completed successfully'
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: 'error'
        message:
          type: string
          example: 'Invalid request data'
    QuitProgressCreateRequest:
      type: object
      properties:
        stageId:
          type: string
          example: 'stage-12345'
          description: ID of the quit plan stage
        date:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
          description: Date of the progress record
        cigarettesSmoked:
          type: integer
          minimum: 0
          example: 5
          description: Number of cigarettes smoked on the given date
        healthStatus:
          type: string
          example: 'Feeling better'
          description: User's health status
        notes:
          type: string
          example: 'Had some cravings but managed to resist'
          description: Optional notes about the progress
      required:
        - stageId
        - date
        - cigarettesSmoked
        - healthStatus
    QuitProgressUpdateRequest:
      type: object
      properties:
        stageId:
          type: string
          example: 'stage-12345'
          description: ID of the quit plan stage
        date:
          type: string
          format: date-time
          example: '2025-06-02T13:46:00.000Z'
          description: Date of the progress record
        cigarettesSmoked:
          type: integer
          minimum: 0
          example: 5
          description: Number of cigarettes smoked on the given date
        healthStatus:
          type: string
          example: 'Feeling better'
          description: User's health status
        notes:
          type: string
          example: 'Updated notes'
          description: Optional notes about the progress
    Blog:
      type: object
      properties:
        _id:
          type: string
          example: 'blog123'
        title:
          type: string
          example: 'Cách bỏ thuốc lá hiệu quả'
        slug:
          type: string
          example: 'cach-bo-thuoc-la-hieu-qua'
        description:
          type: string
          example: 'Bài viết giới thiệu các phương pháp bỏ thuốc lá hiệu quả'
        image:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/images/quit-smoking.jpg'
        tags:
          type: array
          items:
            type: object
            properties:
              _id:
                type: string
                example: 'tag123'
              tagId:
                type: string
                example: 'quit-smoking'
              tagName:
                type: string
                example: 'quit-smoking'
        likes:
          type: array
          items:
            type: string
            example: 'user123'
        comments:
          type: array
          items:
            $ref: '#/components/schemas/Comment'
        user:
          type: object
          properties:
            _id:
              type: string
              example: 'user123'
            name:
              type: string
              example: 'John Doe'
            email:
              type: string
              format: email
              example: 'john@example.com'
        isDeleted:
          type: boolean
          example: false
        isHidden:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: '2023-01-15T08:30:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-01-15T08:30:00Z'
      required:
        - _id
        - title
        - slug
        - description
        - user
    BlogCreateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Cách bỏ thuốc lá hiệu quả'
        description:
          type: string
          example: 'Bài viết giới thiệu các phương pháp bỏ thuốc lá hiệu quả'
        image:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/images/quit-smoking.jpg'
        tags:
          type: array
          items:
            type: string
            example: 'quit-smoking'
      required:
        - title
        - description
    BlogUpdateRequest:
      type: object
      properties:
        title:
          type: string
          example: 'Cập nhật: Cách bỏ thuốc lá hiệu quả'
        description:
          type: string
          example: 'Nội dung cập nhật về các phương pháp bỏ thuốc lá'
        image:
          type: array
          items:
            type: string
            format: uri
            example: 'https://example.com/images/updated-quit-smoking.jpg'
        tags:
          type: array
          items:
            type: string
            example: 'quit-smoking'
    Comment:
      type: object
      properties:
        _id:
          type: string
          example: 'comment123'
        text:
          type: string
          example: 'Bài viết rất hữu ích!'
        author:
          type: object
          properties:
            _id:
              type: string
              example: 'user123'
            name:
              type: string
              example: 'John Doe'
            email:
              type: string
              format: email
              example: 'john@example.com'
        blog:
          type: string
          example: 'blog123'
        createdAt:
          type: string
          format: date-time
          example: '2023-01-15T09:30:00Z'
        updatedAt:
          type: string
          format: date-time
          example: '2023-01-15T09:30:00Z'
      required:
        - _id
        - text
        - author
    CommentRequest:
      type: object
      properties:
        comment:
          type: string
          example: 'Bài viết rất hữu ích!'
      required:
        - comment