const cron = require('node-cron');
const UserMembership = require('../models/userMemberShip.model');

class MembershipScheduler {

    static async updateExpiredMemberships() {
        try {
            console.log('ƒêang ki·ªÉm tra c√°c g√≥i th√†nh vi√™n h·∫øt h·∫°n...');

            const result = await UserMembership.updateMany(
                {
                    paymentStatus: 'paid',
                    endDate: { $lt: new Date() }
                },
                {
                    paymentStatus: 'expired'
                }
            );

            if (result.modifiedCount > 0) {
                console.log(`ƒê√£ c·∫≠p nh·∫≠t ${result.modifiedCount} g√≥i th√†nh vi√™n h·∫øt h·∫°n`);
            } else {
                console.log('Kh√¥ng c√≥ g√≥i th√†nh vi√™n n√†o h·∫øt h·∫°n');
            }

            return result;
        } catch (error) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i membership:', error.message);
            throw error;
        }
    }

    static async getExpiringSoonMemberships() {
        try {
            const sevenDaysFromNow = new Date();
            sevenDaysFromNow.setDate(sevenDaysFromNow.getDate() + 7);

            const expiringSoon = await UserMembership.find({
                paymentStatus: 'paid',
                endDate: {
                    $gte: new Date(),
                    $lte: sevenDaysFromNow
                }
            }).populate('userId memberShipPlanId');

            if (expiringSoon.length > 0) {
                console.log(`C√≥ ${expiringSoon.length} g√≥i th√†nh vi√™n s·∫Øp h·∫øt h·∫°n trong 7 ng√†y`);

                expiringSoon.forEach(membership => {
                    const daysLeft = Math.ceil((membership.endDate - new Date()) / (1000 * 60 * 60 * 24));
                    console.log(`- User: ${membership.userId.userName}, Plan: ${membership.memberShipPlanId.name}, Days left: ${daysLeft}`);
                });
            }

            return expiringSoon;
        } catch (error) {
            console.error('L·ªói khi l·∫•y danh s√°ch membership s·∫Øp h·∫øt h·∫°n:', error.message);
            throw error;
        }
    }

    static async getMembershipStats() {
        try {
            const stats = await UserMembership.aggregate([
                {
                    $group: {
                        _id: '$paymentStatus',
                        count: { $sum: 1 }
                    }
                }
            ]);

            console.log('üìä Th·ªëng k√™ membership:');
            stats.forEach(stat => {
                console.log(`- ${stat._id}: ${stat.count}`);
            });

            return stats;
        } catch (error) {
            console.error('L·ªói khi l·∫•y th·ªëng k√™ membership:', error.message);
            throw error;
        }
    }
    static initScheduler() {
        // Ki·ªÉm tra m·ªói ng√†y l√∫c 00:00
        cron.schedule('0 0 * * *', async () => {
            console.log('Ch·∫°y task ki·ªÉm tra membership h·∫±ng ng√†y...');
            try {
                await this.updateExpiredMemberships();
                await this.getExpiringSoonMemberships();
                await this.getMembershipStats();
            } catch (error) {
                console.error('L·ªói trong daily membership task:', error.message);
            }
        });

        cron.schedule('0 * * * *', async () => {
            try {
                await this.updateExpiredMemberships();
            } catch (error) {
                console.error('L·ªói trong hourly membership task:', error.message);
            }
        });
    }

    static async runImmediateCheck() {
        console.log('Ch·∫°y ki·ªÉm tra membership ngay l·∫≠p t·ª©c...');
        try {
            await this.updateExpiredMemberships();
            await this.getExpiringSoonMemberships();
            await this.getMembershipStats();
            console.log('Ki·ªÉm tra ho√†n t·∫•t');
        } catch (error) {
            console.error('L·ªói khi ch·∫°y ki·ªÉm tra ngay l·∫≠p t·ª©c:', error.message);
        }
    }
}

module.exports = MembershipScheduler; 